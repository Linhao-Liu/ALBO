# -*- coding: utf-8 -*-
"""论文发表用_LaFeO3_Crystall_size_BO_ALP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_GhSJuo0BgWDc_yc_IlAFuArTGCvSUWw
"""

atomic_no = {
    "H":1, "He":2, "Li":3, "Be":4, "B":5, "C":6, "N":7, "O":8, "F":9, "Ne":10, "Na":11, "Mg":12, "Al":13, "Si":14, "P":15, "S":16, "Cl":17, "Ar":18, "K":19, "Ca":20,
    "Sc":21, "Ti":22, "V":23, "Cr":24, "Mn":25, "Fe":26, "Co":27, "Ni":28, "Cu":29, "Zn":30, "Ga":31, "Ge":32, "As":33, "Se":34, "Br":35, "Kr":36, "Rb":37, "Sr":38,
    "Y":39, "Zr":40, "Nb":41, "Mo":42, "Tc":43, "Ru":44, "Rh":45, "Pd":46, "Ag":47, "Cd":48, "In":49, "Sn":50, "Sb":51, "Te":52, "I":53, "Xe":54, "Cs":55, "Ba":56,
    "La":57, "Ce":58, "Pr":59, "Nd":60, "Pm":61, "Sm":62, "Eu":63, "Gd":64, "Tb":65, "Dy":66, "Ho":67, "Er":68, "Tm":69, "Yb":70, "Lu":71, "Hf":72, "Ta":73, "W":74,
    "Re":75, "Os":76, "Ir":77, "Pt":78, "Au":79, "Hg":80, "Tl":81, "Pb":82, "Bi":83, "Po":84, "At":85, "Rn":86, "Fr":87, "Ra":88, "Ac":89, "Th":90, "Pa":91, "U":92,
    "Np":93, "Pu":94, "Am":95, "Cm":96, "Bk":97, "Cf":98, "Es":99, "Fm":100, "Md":101, "No":102, "Lr":103
    }

group_no = {
    "H":1, "He":18, "Li":1, "Be":2, "B":13, "C":14, "N":15, "O":16, "F":17, "Ne":18, "Na":1, "Mg":2, "Al":13, "Si":14, "P":15, "S":16, "Cl":17, "Ar":18, "K":1, "Ca":2,
    "Sc":3, "Ti":4, "V":5, "Cr":6, "Mn":7, "Fe":8, "Co":9, "Ni":10, "Cu":11, "Zn":12, "Ga":13, "Ge":14, "As":15, "Se":16, "Br":17, "Kr":18, "Rb":1, "Sr":2,
    "Y":3, "Zr":4, "Nb":5, "Mo":6, "Tc":7, "Ru":8, "Rh":9, "Pd":10, "Ag":11, "Cd":12, "In":13, "Sn":14, "Sb":15, "Te":16, "I":17, "Xe":18, "Cs":1, "Ba":2,
    "La":3, "Ce":4, "Pr":5, "Nd":6, "Pm":7, "Sm":8, "Eu":9, "Gd":10, "Tb":11, "Dy":12, "Ho":13, "Er":14, "Tm":15, "Yb":16, "Lu":17, "Hf":4, "Ta":5, "W":6,
    "Re":7, "Os":8, "Ir":9, "Pt":10, "Au":11, "Hg":12, "Tl":13, "Pb":14, "Bi":15, "Po":16, "At":17, "Rn":18, "Fr":1, "Ra":2, "Ac":3, "Th":4, "Pa":5, "U":6,
    "Np":7, "Pu":8, "Am":9, "Cm":10, "Bk":11, "Cf":12, "Es":13, "Fm":14, "Md":15, "No":16, "Lr":17
    }

row_no = {
    "H":1, "He":1, "Li":2, "Be":2, "B":2, "C":2, "N":2, "O":2, "F":2, "Ne":2, "Na":3, "Mg":3, "Al":3, "Si":3, "P":3, "S":3, "Cl":3, "Ar":3, "K":4, "Ca":4,
    "Sc":4, "Ti":4, "V":4, "Cr":4, "Mn":4, "Fe":4, "Co":4, "Ni":4, "Cu":4, "Zn":4, "Ga":4, "Ge":4, "As":4, "Se":4, "Br":4, "Kr":4, "Rb":5, "Sr":5,
    "Y":5, "Zr":5, "Nb":5, "Mo":5, "Tc":5, "Ru":5, "Rh":5, "Pd":5, "Ag":5, "Cd":5, "In":5, "Sn":5, "Sb":5, "Te":5, "I":5, "Xe":5, "Cs":6, "Ba":6,
    "La":8, "Ce":8, "Pr":8, "Nd":8, "Pm":8, "Sm":8, "Eu":8, "Gd":8, "Tb":8, "Dy":8, "Ho":8, "Er":8, "Tm":8, "Yb":8, "Lu":8, "Hf":6, "Ta":6, "W":6,
    "Re":6, "Os":6, "Ir":6, "Pt":6, "Au":6, "Hg":6, "Tl":6, "Pb":6, "Bi":6, "Po":6, "At":6, "Rn":6, "Fr":7, "Ra":7, "Ac":9, "Th":9, "Pa":9, "U":9,
    "Np":9, "Pu":9, "Am":9, "Cm":9, "Bk":9, "Cf":9, "Es":9, "Fm":9, "Md":9, "No":9, "Lr":9
    }

valence = {
    "H":1, "He":2, "Li":1, "Be":2, "B":3, "C":4, "N":5, "O":6, "F":7, "Ne":8, "Na":1, "Mg":2, "Al":3, "Si":4, "P":5, "S":6, "Cl":7, "Ar":8, "K":1, "Ca":2,
    "Sc":2, "Ti":2, "V":2, "Cr":1, "Mn":2, "Fe":2, "Co":2, "Ni":2, "Cu":1, "Zn":2, "Ga":3, "Ge":4, "As":5, "Se":6, "Br":7, "Kr":8, "Rb":1, "Sr":2,
    "Y":2, "Zr":2, "Nb":1, "Mo":1, "Tc":2, "Ru":1, "Rh":1, "Pd":9, "Ag":1, "Cd":2, "In":3, "Sn":4, "Sb":5, "Te":6, "I":7, "Xe":8, "Cs":1, "Ba":2,
    "La":2, "Ce":2, "Pr":2, "Nd":2, "Pm":2, "Sm":2, "Eu":2, "Gd":2, "Tb":2, "Dy":2, "Ho":2, "Er":2, "Tm":2, "Yb":2, "Lu":2, "Hf":2, "Ta":2, "W":2,
    "Re":2, "Os":2, "Ir":2, "Pt":1, "Au":1, "Hg":2, "Tl":3, "Pb":4, "Bi":5, "Po":6, "At":7, "Rn":8, "Fr":1, "Ra":2, "Ac":2, "Th":2, "Pa":2, "U":2,
    "Np":2, "Pu":2, "Am":2, "Cm":2, "Bk":2, "Cf":2, "Es":2, "Fm":2, "Md":2, "No":2, "Lr":3
    }

block = {
    "H":1, "He":1, "Li":1, "Be":1, "B":2, "C":2, "N":2, "O":2, "F":2, "Ne":2, "Na":1, "Mg":1, "Al":2, "Si":2, "P":2, "S":2, "Cl":2, "Ar":2, "K":1, "Ca":1,
    "Sc":3, "Ti":3, "V":3, "Cr":3, "Mn":3, "Fe":3, "Co":3, "Ni":3, "Cu":3, "Zn":3, "Ga":2, "Ge":2, "As":2, "Se":2, "Br":2, "Kr":2, "Rb":1, "Sr":1,
    "Y":3, "Zr":3, "Nb":3, "Mo":3, "Tc":3, "Ru":3, "Rh":3, "Pd":3, "Ag":3, "Cd":3, "In":2, "Sn":2, "Sb":2, "Te":2, "I":2, "Xe":2, "Cs":1, "Ba":1,
    "La":4, "Ce":4, "Pr":4, "Nd":4, "Pm":4, "Sm":4, "Eu":4, "Gd":4, "Tb":4, "Dy":4, "Ho":4, "Er":4, "Tm":4, "Yb":4, "Lu":3, "Hf":3, "Ta":3, "W":3,
    "Re":3, "Os":3, "Ir":3, "Pt":3, "Au":3, "Hg":3, "Tl":2, "Pb":2, "Bi":2, "Po":2, "At":2, "Rn":2, "Fr":1, "Ra":1, "Ac":4, "Th":4, "Pa":4, "U":4,
    "Np":4, "Pu":4, "Am":4, "Cm":4, "Bk":4, "Cf":4, "Es":4, "Fm":4, "Md":4, "No":4, "Lr":3
    }

electronegativity = {
    'H':2.2, 'He':'n.a', 'Li':0.98, 'Be':   1.57, 'B':  2.04, 'C':2.55,'N': 3.04,'O':   3.44,'F':   3.98,'Ne':  "n.a",'Na': 0.93,'Mg':  1.31,'Al':  1.61,'Si':  1.9,
    'P':    2.19,'S':   2.58,'Cl':  3.16,'Ar':  "n.a", 'K': 0.82, 'Ca': 1, 'Sc':    1.36, 'Ti': 1.54, 'V':  1.63,'Cr':  1.66,'Mn':  1.55,'Fe':  1.83,'Co':  1.88,'Ni':  1.91,
    'Cu':   1.9, 'Zn':  1.65, 'Ga': 1.81, 'Ge': 2.01,'As':  2.18,'Se':  2.55,'Br':  2.96,'Kr':  "n.a",'Rb': 0.82,'Sr':  0.95,'Y':   1.22,'Zr':  1.33,'Nb':  1.6,'Mo':   2.16,
    'Tc':   2.1,'Ru':   2.2,'Rh':   2.28,'Pd':  2.2,'Ag':   1.93,'Cd':  1.69,'In':  1.78,'Sn':  1.96,'Sb':  2.05,'Te':  2.1,'I':    2.66,'Xe':  2.6,'Cs':   0.79,'Ba':  0.89,
    'La':   1.1,'Ce':   1.12,'Pr':  1.13,'Nd':  1.14,'Pm':  1.13,'Sm':  1.17,'Eu':  1.2,'Gd':   1.2,'Tb':   1.1,'Dy':   1.22,'Ho':  1.23,'Er':  1.24,'Tm':  1.25,'Yb':  1.1,
    'Lu':   1,'Hf': 1.3,'Ta':   1.5,'W':    1.7,'Re':   1.9,'Os':   2.2,'Ir':   2.2,'Pt':   2.2,'Au':   2.4,'Hg':   1.9,'Tl':   1.8,'Pb':   1.8,'Bi':   1.9,'Po':   2,'At': 2.2,'Rn':   2.2,'Fr':   0.7,
    'Ra':   0.9,'Ac':   1.1,'Th':   1.3,'Pa':   1.5,'U':    1.7,'Np':   1.3,'Pu':   1.3,'Am':   1.3,'Cm':   1.3,'Bk':   1.3,'Cf':   1.3,'Es':   1.3,'Fm':   1.3,'Md':   1.3,'No':   1.3,'Lr':   1.3
    }

covalent_radius = {
    'H':    0.31,'He':  0.28,'Li':  1.28,'Be':  0.96,'B':   0.84,'C':   0.76,'N':   0.71,'O':   0.66,'F':   0.57,'Ne':  0.58,'Na':  1.66,'Mg':  1.41,'Al':  1.21,'Si':  1.11,'P':   1.07,
    'S':    1.05,'Cl':  1.02,'Ar':  1.06,'K':   2.03,'Ca':  1.76,'Sc':  1.7,'Ti':   1.6,'V':    1.53,'Cr':  1.39,'Mn':  1.39,'Fe':  1.32,'Co':  1.26,'Ni':  1.24,'Cu':  1.32,'Zn':  1.22,
    'Ga':   1.22,'Ge':  1.2,'As':   1.19,'Se':  1.2,'Br':   1.2,'Kr':   1.16,'Rb':  2.2,'Sr':   1.95,'Y':   1.9,'Zr':   1.75,'Nb':  1.64,'Mo':  1.54,'Tc':  1.47,'Ru':  1.46,'Rh':  1.42,
    'Pd':   1.39,'Ag':  1.45,'Cd':  1.44,'In':  1.42,'Sn':  1.39,'Sb':  1.39,'Te':  1.38,'I':   1.39,'Xe':  1.4,'Cs':   2.44,'Ba':  2.15,'La':  2.07,'Ce':  2.04,'Pr':  2.03,'Nd':  2.01,
    'Pm':   1.99,'Sm':  1.98,'Eu':  1.98,'Gd':  1.96,'Tb':  1.94,'Dy':  1.92,'Ho':  1.92,'Er':  1.89,'Tm':  1.9,'Yb':   1.87,'Lu':  1.87,'Hf':  1.75,'Ta':  1.7,'W':    1.62,'Re':  1.51,
    'Os':   1.44,'Ir':  1.41,'Pt':  1.36,'Au':  1.36,'Hg':  1.32,'Tl':  1.45,'Pb':  1.46,'Bi':  1.48,'Po':  1.4,'At':   1.5,'Rn':   1.5,'Fr':   2.6,'Ra':   2.21,'Ac':  2.15,'Th':  2.06,
    'Pa':   2,'U':  1.96,'Np':  1.9,'Pu':   1.87,'Am':  1.8,'Cm':   1.69,'Bk':  'n.a','Cf': 'n.a','Es': 'n.a','Fm': 'n.a','Md': 'n.a','No': 'n.a','Lr': 'n.a'
    }

ionization_energy = {
    'H':    13.59844,'He':  24.58741,'Li':  5.39172,'Be':   9.3227,'B': 8.29803,'C':    11.2603,'N':    14.53414,'O':   13.61806,'F':   17.42282,'Ne':  21.5646,'Na':   5.13908,'Mg':   7.64624,
    'Al':   5.98577,'Si':   8.15169,'P':    10.48669,'S':   10.36001,'Cl':  12.96764,'Ar':  15.75962,'K':   4.34066,'Ca':   6.11316,'Sc':   6.5615,'Ti':    6.8281,'V': 6.7462,'Cr':    6.7665,
    'Mn':   7.43402,'Fe':   7.9024,'Co':    7.881,'Ni': 7.6398,'Cu':    7.72638,'Zn':   9.3942,'Ga':    5.9993,'Ge':    7.8994,'As':    9.7886,'Se':    9.75238,'Br':   11.81381,'Kr':  13.99961,
    'Rb':   4.17713,'Sr':   5.6949,'Y': 6.2171,'Zr':    6.6339,'Nb':    6.75885,'Mo':   7.09243,'Tc':   7.28,'Ru':  7.3605,'Rh':    7.4589,'Pd':    8.3369,'Ag':    7.5762,'Cd':    8.9938,'In':    5.78636,
    'Sn':   7.3439,'Sb':    8.6084,'Te':    9.0096,'I': 10.45126,'Xe':  12.1298,'Cs':   3.8939,'Ba':    5.2117,'La':    5.5769,'Ce':    5.5387,'Pr':    5.473,'Nd': 5.525,'Pm': 5.582,'Sm': 5.6436,
    'Eu':   5.6704,'Gd':    6.1501,'Tb':    5.8638,'Dy':    5.9389,'Ho':    6.0215,'Er':    6.1077,'Tm':    6.18431,'Yb':   6.25416,'Lu':   5.4259,'Hf':    6.82507,'Ta':   7.5496,'W': 7.864,'Re': 7.8335,
    'Os':   8.4382,'Ir':    8.967,'Pt': 8.9587,'Au':    9.2255,'Hg':    10.4375,'Tl':   6.1082,'Pb':    7.41666,'Bi':   7.2856,'Po':    8.417,'At': "n.a",'Rn': 10.7485,'Fr':   4.0727,'Ra':    5.2784,
    'Ac':   5.17,'Th':  6.3067,'Pa':    5.89,'U':   6.19405,'Np':   6.2657,'Pu':    6.0262,'Am':    5.9738,'Cm':    5.9915,'Bk':    6.1979,'Cf':    6.2817,'Es':    6.42,'Fm':  6.5,'Md':   6.58,'No':  6.65,
    'Lr':   4.9
    }

electron_affinity = {
    'H':    0.754195,'He':  -0.5182,'Li':   0.618049,'Be':  -0.5182,'B':    0.279723,'C':   1.262119,'N':   -0.0725,'O':    1.4611096,'F':  3.4011895,'Ne': -1.2437,'Na':   0.547926,'Mg':  -0.4146,
    'Al':   0.43283,'Si':   1.389522,'P':   0.7465,'S': 2.077103,'Cl':  3.612724,'Ar':  -0.995,'K': 0.50147,'Ca':   0.02455,'Sc':   0.188,'Ti': 0.079,'V':  0.525,'Cr': 0.666,'Mn': -0.5,
    'Fe':   0.151,'Co': 0.662,'Ni': 1.156,'Cu': 1.235,'Zn': -0.6219,'Ga':   0.43,'Ge':  1.232712,'As':  0.814,'Se': 2.02067,'Br':   3.363588,'Kr':  -1,'Rb':    0.48592,'Sr':   0.048,'Y':  0.307,
    'Zr':   0.426,'Nb': 0.8933,'Mo':    0.748,'Tc': 0.55,'Ru':  1.05,'Rh':  1.137,'Pd': 0.562,'Ag': 1.302,'Cd': -0.7255,'In':   0.3,'Sn':   1.112067,'Sb':  1.046,'Te': 1.9708,'I': 3.059037,
    'Xe':   -0.8291,'Cs':   0.471626,'Ba':  0.14462,'La':   0.47,'Ce':  0.57,'Pr':  0.964,'Nd': 0.09749,'Pm':   0.124,'Sm': 0.166,'Eu': 0.114,'Gd': 0.135,'Tb': 1.161,'Dy': 0.352,'Ho': 0.342,
    'Er':   0.311,'Tm': 1.03,'Yb':  -0.02,'Lu': 0.34,'Hf':  0.176,'Ta': 0.322,'W':  0.815,'Re': 0.15,'Os':  1.1,'Ir':   1.5638,'Pt':    2.128,'Au': 2.30863,'Hg':   -0.5182,'Tl':   0.2,'Pb':   0.364,
    'Bi':   0.946,'Po': 1.9,'At':   2.8,'Rn':   -0.7255,'Fr':   0.46,'Ra':  0.1,'Ac':   0.35,'Th':  0.60769,'Pa':   0.57,'U':   0.31497,'Np':   0.477,'Pu': -0.5,'Am':  0.1,'Cm':   0.28,'Bk':  -1.72,
    'Cf':   -1.01,'Es': -0.3,'Fm':  0.35,'Md':  0.98,'No':  -2.33,'Lr': -0.31
    }

molar_volume = {
    'H':    11.42,'He': 21,'Li':    13.02,'Be': 4.85,'B':   4.39,'C':   5.29,'N':   13.54,'O':  17.36,'F':  11.2,'Ne':  13.23,'Na': 23.78,'Mg': 14,'Al':    10,'Si':    12.06,'P':  17.02,'S':  15.53,
    'Cl':   17.39,'Ar': 22.56,'K':  45.94,'Ca': 26.2,'Sc':  15,'Ti':    10.64,'V':  8.32,'Cr':  7.23,'Mn':  7.35,'Fe':  7.09,'Co':  6.67,'Ni':  6.59,'Cu':  7.11,'Zn':  9.16,'Ga':  11.8,
    'Ge':   13.63,'As': 12.95,'Se': 16.42,'Br': 19.78,'Kr': 27.99,'Rb': 55.76,'Sr': 33.94,'Y':  19.88,'Zr': 14.02,'Nb': 10.83,'Mo': 9.38,'Tc':  8.63,'Ru':  8.17,'Rh':  8.28,'Pd':  8.56,
    'Ag':   10.27,'Cd': 13,'In':    15.76,'Sn': 16.29,'Sb': 18.19,'Te': 20.46,'I':  25.72,'Xe': 35.92,'Cs': 70.94,'Ba': 38.16,'La': 22.39,'Ce': 20.69,'Pr': 20.8,'Nd':  20.59,'Pm': 20.23,
    'Sm':   19.98,'Eu': 28.97,'Gd': 19.9,'Tb':  19.3,'Dy':  19.01,'Ho': 18.74,'Er': 18.46,'Tm': 19.1,'Yb':  24.84,'Lu': 17.78,'Hf': 13.44,'Ta': 10.85,'W':  9.47,'Re':  8.86,'Os':  8.42,
    'Ir':   8.52,'Pt':  9.09,'Au':  10.21,'Hg': 14.09,'Tl': 17.22,'Pb': 18.26,'Bi': 21.31,'Po': 22.97,'At': "n.a",'Rn': 50.5,'Fr':  "n.a",'Ra': 41.09,'Ac': 22.55,'Th': 19.8,'Pa':  15.18,
    'U':    12.49,'Np': 11.59,'Pu': 12.29,'Am': 17.63,'Cm': 18.05,'Bk': 16.84,'Cf': 16.5,'Es':  28.52,'Fm': "n.a",'Md': "n.a",'No': "n.a",'Lr': "n.a"
    }

average_ionic_radius = {
    'H':    0,'He': 0,'Li': 0.9,'Be':   0.59,'B':   0.41,'C':   0.3,'N':    0.63,'O':   1.26,'F':   0.705,'Ne': 0,'Na': 1.16,'Mg':  0.86,'Al':  0.675,'Si': 0.54,'P':   0.55,'S':   0.88,'Cl':  0.78,
    'Ar':   0,'K':  1.52,'Ca':  1.14,'Sc':  0.885,'Ti': 0.852,'V':  0.777,'Cr': 0.94,'Mn':  0.648,'Fe': 0.853,'Co': 0.768,'Ni': 0.74,'Cu':  0.82,'Zn':  0.88,'Ga':  0.76,'Ge':  0.77,
    'As':   0.66,'Se':  1.013,'Br': 0.883,'Kr': 0,'Rb': 1.66,'Sr':  1.32,'Y':   1.04,'Zr':  0.86,'Nb':  0.82,'Mo':  0.775,'Tc': 0.742,'Ru': 0.661,'Rh': 0.745,'Pd': 0.846,'Ag': 1.087,
    'Cd':   1.09,'In':  0.94,'Sn':  0.83,'Sb':  0.83,'Te':  1.293,'I':  1.273,'Xe': 0.62,'Cs':  1.81,'Ba':  1.49,'La':  1.172,'Ce': 1.08,'Pr':  1.06,'Nd':  1.276,'Pm': 1.11,'Sm':  1.229,
    'Eu':   1.199,'Gd': 1.075,'Tb': 0.982,'Dy': 1.131,'Ho': 1.041,'Er': 1.03,'Tm':  1.095,'Yb': 1.084,'Lu': 1.001,'Hf': 0.85,'Ta':  0.82,'W':   0.767,'Re': 0.712,'Os': 0.673,'Ir': 0.765,
    'Pt':   0.805,'Au': 1.07,'Hg':  1.245,'Tl': 1.333,'Pb': 1.123,'Bi': 1.035,'Po': 0.945,'At': 0.76,'Rn':  0,'Fr': 1.94,'Ra':  1.62,'Ac':  1.26,'Th':  1.08,'Pa':  1.04,'U':   0.991,'Np': 1,
    'Pu':   0.967,'Am': 1.168,'Cm': 1.05,'Bk':  1.035,'Cf': 1.026,'Es': 0,'Fm': 0,'Md': 0,'No': 0,'Lr': 0
    }

polarizability = {
    'H':    0.666793,'He':  0.204956,'Li':  24.3,'Be':  5.6,'B':    3.03,'C':   1.76,'N':   1.1,'O':    0.802,'F':  0.557,'Ne': 0.3956,'Na':    24.11,'Mg': 10.6,'Al':  6.8,'Si':   5.38,'P':   3.63,
    'S':    2.9,'Cl':   2.18,'Ar':  1.6411,'K': 43.4,'Ca':  22.8,'Sc':  17.8,'Ti':  14.6,'V':   12.4,'Cr':  11.6,'Mn':  9.4,'Fe':   8.4,'Co':   7.5,'Ni':   6.8,'Cu':   6.2,'Zn':   5.75,'Ga':  8.12,
    'Ge':   6.07,'As':  4.31,'Se':  3.77,'Br':  3.05,'Kr':  2.4844,'Rb':    47.3,'Sr':  27.6,'Y':   22.7,'Zr':  17.9,'Nb':  15.7,'Mo':  12.8,'Tc':  11.4,'Ru':  9.6,'Rh':   8.6,'Pd':   4.8,
    'Ag':   7.2,'Cd':   7.36,'In':  10.2,'Sn':  7.7,'Sb':   6.6,'Te':   5.5,'I':    5.35,'Xe':  4.044,'Cs': 59.42,'Ba': 39.7,'La':  31.1,'Ce':  29.6,'Pr':  28.2,'Nd':  31.4,'Pm':  30.1,
    'Sm':   28.8,'Eu':  27.7,'Gd':  23.5,'Tb':  25.5,'Dy':  24.5,'Ho':  23.6,'Er':  22.7,'Tm':  21.8,'Yb':  21,'Lu':    21.9,'Hf':  16.2,'Ta':  13.1,'W':   11.1,'Re':  9.7,'Os':   8.5,
    'Ir':   7.6,'Pt':   6.5,'Au':   5.8,'Hg':   5.02,'Tl':  7.6,'Pb':   6.8,'Bi':   7.4,'Po':   6.8,'At':   6,'Rn': 5.3,'Fr':   47.1,'Ra':  38.3,'Ac':  32.1,'Th':  32.1,'Pa':  25.4,'U':   24.9,'Np':  24.8,
    'Pu':   24.5,'Am':  23.3,'Cm':  23,'Bk':    22.7,'Cf':  20.5,'Es':  19.7,'Fm':  23.8,'Md':  18.2,'No':  17.5,'Lr':  "n.a."
    }

specific_heat = {
    'H':    14.304,'He':    5.193,'Li': 3.582,'Be': 1.825,'B':  1.026,'C':  0.709,'N':  1.04,'O':   0.918,'F':  0.824,'Ne': 1.03,'Na':  1.228,'Mg': 1.023,'Al': 0.897,'Si': 0.705,'P':  0.769,
    'S':    0.71,'Cl':  0.479,'Ar': 0.52,'K':   0.757,'Ca': 0.647,'Sc': 0.568,'Ti': 0.523,'V':  0.489,'Cr': 0.449,'Mn': 0.479,'Fe': 0.449,'Co': 0.421,'Ni': 0.444,'Cu': 0.385,'Zn': 0.388,
    'Ga':   0.371,'Ge': 0.32,'As':  0.329,'Se': 0.321,'Br': 0.474,'Kr': 0.248,'Rb': 0.363,'Sr': 0.301,'Y':  0.298,'Zr': 0.278,'Nb': 0.265,'Mo': 0.251,'Tc': 0.063,'Ru': 0.238,'Rh': 0.243,
    'Pd':   0.244,'Ag': 0.235,'Cd': 0.232,'In': 0.233,'Sn': 0.228,'Sb': 0.207,'Te': 0.202,'I':  0.214,'Xe': 0.158,'Cs': 0.242,'Ba': 0.204,'La': 0.195,'Ce': 0.192,'Pr': 0.193,'Nd': 0.19,
    'Pm':   0.18,'Sm':  0.197,'Eu': 0.182,'Gd': 0.236,'Tb': 0.182,'Dy': 0.17,'Ho':  0.165,'Er': 0.168,'Tm': 0.16,'Yb':  0.155,'Lu': 0.154,'Hf': 0.144,'Ta': 0.14,'W':   0.132,'Re': 0.137,
    'Os':   0.13,'Ir':  0.131,'Pt': 0.133,'Au': 0.129,'Hg': 0.14,'Tl':  0.129,'Pb': 0.129,'Bi': 0.122,'Po': "n.a",'At': "n.a",'Rn': 0.094,'Fr': "n.a",'Ra': 0.092,'Ac': 0.12,'Th':  0.113,
    'Pa':   0.0991,'U': 0.116,'Np': 0.12,'Pu':  0.13,'Am':  "n.a",'Cm': "n.a",'Bk': "n.a",'Cf': "n.a",'Es': "n.a",'Fm': "n.a",'Md': "n.a",'No': "n.a",'Lr': "n.a"
    }

thermal_conductivity = {
    'H':    0.1805,'He':    0.1513,'Li':    85,'Be':    190,'B':    27,'C': 140,'N':    0.02583,'O':    0.02658,'F':    0.0277,'Ne':    0.0491,'Na':    140,'Mg':   160,'Al':   235,'Si':   150,'P':    0.236,
    'S':    0.205,'Cl': 0.0089,'Ar':    0.01772,'K':    100,'Ca':   200,'Sc':   16,'Ti':    22,'V': 31,'Cr':    94,'Mn':    7.8,'Fe':   80,'Co':    100,'Ni':   91,'Cu':    400,'Zn':   120,'Ga':   29,'Ge':    60,
    'As':   50,'Se':    2.04,'Br':  0.12,'Kr':  0.00943,'Rb':   58,'Sr':    35,'Y': 17,'Zr':    23,'Nb':    54,'Mo':    139,'Tc':   51,'Ru':    120,'Rh':   150,'Pd':   72,'Ag':    430,'Cd':   97,'In':    82,
    'Sn':   67,'Sb':    24,'Te':    3,'I':  0.449,'Xe': 0.00565,'Cs':   36,'Ba':    18,'La':    13,'Ce':    11,'Pr':    13,'Nd':    17,'Pm':    17.9,'Sm':  13,'Eu':    14,'Gd':    11,'Tb':    11,'Dy':    11,
    'Ho':   16,'Er':    15,'Tm':    17,'Yb':    39,'Lu':    16,'Hf':    23,'Ta':    57,'W': 170,'Re':   48,'Os':    88,'Ir':    150,'Pt':   72,'Au':    320,'Hg':   8.3,'Tl':   46,'Pb':    35,'Bi':    8,'Po': 20,
    'At':   2,'Rn': 0.00361,'Fr':   77,'Ra':    19,'Ac':    12,'Th':    54,'Pa':    47,'U': 27,'Np':    6,'Pu': 6,'Am': 10,'Cm':    8.8,'Bk':   10,'Cf':    10,'Es':    10,'Fm':    10,'Md':    10,'No':    10,
    'Lr':   10
    }

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import pylab as pl
import numpy as np
import scipy.optimize as opt
from sklearn import preprocessing
# %matplotlib inline
import matplotlib.pyplot as plt
from sklearn import ensemble
from sklearn.inspection import permutation_importance
from sklearn.model_selection import cross_val_score, GridSearchCV, KFold, train_test_split, RandomizedSearchCV
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.pipeline import Pipeline

df = pd.read_excel('synthesis_sheet_V2.xlsx') #Reading the data
df.fillna(0, inplace=True);
df = df[df['Crystallitesize(nm)'] <= 75]  # 删除晶粒大小超过100 nm的样本
print(df.shape)

df.head()

"""#Precusor 1"""

# Atomic Number

z_cursor_mean=[]
z_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    z_array = ((np.repeat(atomic_no[df.iloc[i,2]],df.iloc[i,3]), np.repeat(atomic_no[df.iloc[i,4]],df.iloc[i,5])))
    z_array = np.concatenate(z_array)

    z_mean = np.mean(z_array)
    z_std = np.std(z_array)

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

  elif df.iloc[i,1] == 3:
    z_array = ((np.repeat(atomic_no[df.iloc[i,2]],df.iloc[i,3]), np.repeat(atomic_no[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(atomic_no[df.iloc[i,6]],df.iloc[i,7])))
    z_array = np.concatenate(z_array)

    z_mean = np.mean(z_array)
    z_std = np.std(z_array)

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

  elif df.iloc[i,1] == 4:
    z_array = ((np.repeat(atomic_no[df.iloc[i,2]],df.iloc[i,3]), np.repeat(atomic_no[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(atomic_no[df.iloc[i,6]],df.iloc[i,7]), np.repeat(atomic_no[df.iloc[i,8]],df.iloc[i,9])))
    z_array = np.concatenate(z_array)

    z_mean = np.mean(z_array)
    z_std = np.std(z_array)

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

z_mean1 = np.array(z_cursor_mean).reshape(df.shape[0],1)
z_std1 = np.array(z_cursor_std).reshape(df.shape[0],1)


# Group Number
gn_cursor_mean=[]
gn_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    gn_array = ((np.repeat(group_no[df.iloc[i,2]],df.iloc[i,3]), np.repeat(group_no[df.iloc[i,4]],df.iloc[i,5])))
    gn_array = np.concatenate(gn_array)

    gn_mean = np.mean(gn_array)
    gn_std = np.std(gn_array)

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)

  elif df.iloc[i,1] == 3:
    gn_array = ((np.repeat(group_no[df.iloc[i,2]],df.iloc[i,3]), np.repeat(group_no[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(group_no[df.iloc[i,6]],df.iloc[i,7])))
    gn_array = np.concatenate(gn_array)

    gn_mean = np.mean(gn_array)
    gn_std = np.std(gn_array)

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)

  elif df.iloc[i,1] == 4:
    gn_array = ((np.repeat(group_no[df.iloc[i,2]],df.iloc[i,3]), np.repeat(group_no[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(group_no[df.iloc[i,6]],df.iloc[i,7]), np.repeat(group_no[df.iloc[i,8]],df.iloc[i,9])))
    gn_array = np.concatenate(gn_array)

    gn_mean = np.mean(gn_array)
    gn_std = np.std(gn_array)

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)

gn_mean1 = np.array(gn_cursor_mean).reshape(df.shape[0],1)
gn_std1 = np.array(gn_cursor_std).reshape(df.shape[0],1)

# Row Number
rn_cursor_mean=[]
rn_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    rn_array = ((np.repeat(row_no[df.iloc[i,2]],df.iloc[i,3]), np.repeat(row_no[df.iloc[i,4]],df.iloc[i,5])))
    rn_array = np.concatenate(rn_array)

    rn_mean = np.mean(rn_array)
    rn_std = np.std(rn_array)

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

  elif df.iloc[i,1] == 3:
    rn_array = ((np.repeat(row_no[df.iloc[i,2]],df.iloc[i,3]), np.repeat(row_no[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(row_no[df.iloc[i,6]],df.iloc[i,7])))
    rn_array = np.concatenate(rn_array)

    rn_mean = np.mean(rn_array)
    rn_std = np.std(rn_array)

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

  elif df.iloc[i,1] == 4:
    rn_array = ((np.repeat(row_no[df.iloc[i,2]],df.iloc[i,3]), np.repeat(row_no[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(row_no[df.iloc[i,6]],df.iloc[i,7]), np.repeat(row_no[df.iloc[i,8]],df.iloc[i,9])))
    rn_array = np.concatenate(rn_array)

    rn_mean = np.mean(rn_array)
    rn_std = np.std(rn_array)

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

rn_mean1 = np.array(rn_cursor_mean).reshape(df.shape[0],1)
rn_std1 = np.array(rn_cursor_std).reshape(df.shape[0],1)


# Valence

vl_cursor_mean=[]
vl_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    vl_array = ((np.repeat(valence[df.iloc[i,2]],df.iloc[i,3]), np.repeat(valence[df.iloc[i,4]],df.iloc[i,5])))
    vl_array = np.concatenate(vl_array)

    vl_mean = np.mean(vl_array)
    vl_std = np.std(vl_array)

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

  elif df.iloc[i,1] == 3:
    vl_array = ((np.repeat(valence[df.iloc[i,2]],df.iloc[i,3]), np.repeat(valence[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(valence[df.iloc[i,6]],df.iloc[i,7])))
    vl_array = np.concatenate(vl_array)

    vl_mean = np.mean(vl_array)
    vl_std = np.std(vl_array)

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

  elif df.iloc[i,1] == 4:
    vl_array = ((np.repeat(valence[df.iloc[i,2]],df.iloc[i,3]), np.repeat(valence[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(valence[df.iloc[i,6]],df.iloc[i,7]), np.repeat(valence[df.iloc[i,8]],df.iloc[i,9])))
    vl_array = np.concatenate(vl_array)

    vl_mean = np.mean(vl_array)
    vl_std = np.std(vl_array)

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

vl_mean1 = np.array(vl_cursor_mean).reshape(df.shape[0],1)
vl_std1 = np.array(vl_cursor_std).reshape(df.shape[0],1)


# Block

bk_cursor_mean=[]
bk_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    bk_array = ((np.repeat(block[df.iloc[i,2]],df.iloc[i,3]), np.repeat(block[df.iloc[i,4]],df.iloc[i,5])))
    bk_array = np.concatenate(bk_array)

    bk_mean = np.mean(bk_array)
    bk_std = np.std(bk_array)

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

  elif df.iloc[i,1] == 3:
    bk_array = ((np.repeat(block[df.iloc[i,2]],df.iloc[i,3]), np.repeat(block[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(block[df.iloc[i,6]],df.iloc[i,7])))
    bk_array = np.concatenate(bk_array)

    bk_mean = np.mean(bk_array)
    bk_std = np.std(bk_array)

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

  elif df.iloc[i,1] == 4:
    bk_array = ((np.repeat(block[df.iloc[i,2]],df.iloc[i,3]), np.repeat(block[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(block[df.iloc[i,6]],df.iloc[i,7]), np.repeat(block[df.iloc[i,8]],df.iloc[i,9])))
    bk_array = np.concatenate(bk_array)

    bk_mean = np.mean(bk_array)
    bk_std = np.std(bk_array)

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

bk_mean1 = np.array(bk_cursor_mean).reshape(df.shape[0],1)
bk_std1 = np.array(bk_cursor_std).reshape(df.shape[0],1)


# Electronegativity

x_cursor_mean=[]
x_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    x_array = ((np.repeat(electronegativity[df.iloc[i,2]],df.iloc[i,3]), np.repeat(electronegativity[df.iloc[i,4]],df.iloc[i,5])))
    x_array = np.concatenate(x_array)

    x_mean = np.mean(x_array)
    x_std = np.std(x_array)

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

  elif df.iloc[i,1] == 3:
    x_array = ((np.repeat(electronegativity[df.iloc[i,2]],df.iloc[i,3]), np.repeat(electronegativity[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(electronegativity[df.iloc[i,6]],df.iloc[i,7])))
    x_array = np.concatenate(x_array)

    x_mean = np.mean(x_array)
    x_std = np.std(x_array)

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

  elif df.iloc[i,1] == 4:
    x_array = ((np.repeat(electronegativity[df.iloc[i,2]],df.iloc[i,3]), np.repeat(electronegativity[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(electronegativity[df.iloc[i,6]],df.iloc[i,7]), np.repeat(electronegativity[df.iloc[i,8]],df.iloc[i,9])))
    x_array = np.concatenate(x_array)

    x_mean = np.mean(x_array)
    x_std = np.std(x_array)

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

x_mean1 = np.array(x_cursor_mean).reshape(df.shape[0],1)
x_std1 = np.array(x_cursor_std).reshape(df.shape[0],1)


# Covalent Radius

cr_cursor_mean=[]
cr_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    cr_array = ((np.repeat(covalent_radius[df.iloc[i,2]],df.iloc[i,3]), np.repeat(covalent_radius[df.iloc[i,4]],df.iloc[i,5])))
    cr_array = np.concatenate(cr_array)

    cr_mean = np.mean(cr_array)
    cr_std = np.std(cr_array)

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

  elif df.iloc[i,1] == 3:
    cr_array = ((np.repeat(covalent_radius[df.iloc[i,2]],df.iloc[i,3]), np.repeat(covalent_radius[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(covalent_radius[df.iloc[i,6]],df.iloc[i,7])))
    cr_array = np.concatenate(cr_array)

    cr_mean = np.mean(cr_array)
    cr_std = np.std(cr_array)

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

  elif df.iloc[i,1] == 4:
    cr_array = ((np.repeat(covalent_radius[df.iloc[i,2]],df.iloc[i,3]), np.repeat(covalent_radius[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(covalent_radius[df.iloc[i,6]],df.iloc[i,7]), np.repeat(covalent_radius[df.iloc[i,8]],df.iloc[i,9])))
    cr_array = np.concatenate(cr_array)

    cr_mean = np.mean(cr_array)
    cr_std = np.std(cr_array)

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

cr_mean1 = np.array(cr_cursor_mean).reshape(df.shape[0],1)
cr_std1 = np.array(cr_cursor_std).reshape(df.shape[0],1)


# Ionization Energy

ie_cursor_mean=[]
ie_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    ie_array = ((np.repeat(ionization_energy[df.iloc[i,2]],df.iloc[i,3]), np.repeat(ionization_energy[df.iloc[i,4]],df.iloc[i,5])))
    ie_array = np.concatenate(ie_array)

    ie_mean = np.mean(ie_array)
    ie_std = np.std(ie_array)

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

  elif df.iloc[i,1] == 3:
    ie_array = ((np.repeat(ionization_energy[df.iloc[i,2]],df.iloc[i,3]), np.repeat(ionization_energy[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(ionization_energy[df.iloc[i,6]],df.iloc[i,7])))
    ie_array = np.concatenate(ie_array)

    ie_mean = np.mean(ie_array)
    ie_std = np.std(ie_array)

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

  elif df.iloc[i,1] == 4:
    ie_array = ((np.repeat(ionization_energy[df.iloc[i,2]],df.iloc[i,3]), np.repeat(ionization_energy[df.iloc[i,4]],df.iloc[i,5]),
                np.repeat(ionization_energy[df.iloc[i,6]],df.iloc[i,7]), np.repeat(ionization_energy[df.iloc[i,8]],df.iloc[i,9])))
    ie_array = np.concatenate(ie_array)

    ie_mean = np.mean(ie_array)
    ie_std = np.std(ie_array)

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

ie_mean1 = np.array(ie_cursor_mean).reshape(df.shape[0],1)
ie_std1 = np.array(ie_cursor_std).reshape(df.shape[0],1)


# Electron Affinity

ea_cursor_mean=[]
ea_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    ea_array = ((np.repeat(electron_affinity[df.iloc[i,2]],df.iloc[i,3]), np.repeat(electron_affinity[df.iloc[i,4]],df.iloc[i,5])))
    ea_array = np.concatenate(ea_array)

    ea_mean = np.mean(ea_array)
    ea_std = np.std(ea_array)

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

  elif df.iloc[i,1] == 3:
    ea_array = ((np.repeat(electron_affinity[df.iloc[i,2]],df.iloc[i,3]), np.repeat(electron_affinity[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(electron_affinity[df.iloc[i,6]],df.iloc[i,7])))
    ea_array = np.concatenate(ea_array)

    ea_mean = np.mean(ea_array)
    ea_std = np.std(ea_array)

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

  elif df.iloc[i,1] == 4:
    ea_array = ((np.repeat(electron_affinity[df.iloc[i,2]],df.iloc[i,3]), np.repeat(electron_affinity[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(electron_affinity[df.iloc[i,6]],df.iloc[i,7]), np.repeat(electron_affinity[df.iloc[i,8]],df.iloc[i,9])))
    ea_array = np.concatenate(ea_array)

    ea_mean = np.mean(ea_array)
    ea_std = np.std(ea_array)

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

ea_mean1 = np.array(ea_cursor_mean).reshape(df.shape[0],1)
ea_std1 = np.array(ea_cursor_std).reshape(df.shape[0],1)


# Molar Volume

mv_cursor_mean=[]
mv_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    mv_array = ((np.repeat(molar_volume[df.iloc[i,2]],df.iloc[i,3]), np.repeat(molar_volume[df.iloc[i,4]],df.iloc[i,5])))
    mv_array = np.concatenate(mv_array)

    mv_mean = np.mean(mv_array)
    mv_std = np.std(mv_array)

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

  elif df.iloc[i,1] == 3:
    mv_array = ((np.repeat(molar_volume[df.iloc[i,2]],df.iloc[i,3]), np.repeat(molar_volume[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(molar_volume[df.iloc[i,6]],df.iloc[i,7])))
    mv_array = np.concatenate(mv_array)

    mv_mean = np.mean(mv_array)
    mv_std = np.std(mv_array)

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

  elif df.iloc[i,1] == 4:
    mv_array = ((np.repeat(molar_volume[df.iloc[i,2]],df.iloc[i,3]), np.repeat(molar_volume[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(molar_volume[df.iloc[i,6]],df.iloc[i,7]), np.repeat(molar_volume[df.iloc[i,8]],df.iloc[i,9])))
    mv_array = np.concatenate(mv_array)

    mv_mean = np.mean(mv_array)
    mv_std = np.std(mv_array)

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

mv_mean1 = np.array(mv_cursor_mean).reshape(df.shape[0],1)
mv_std1 = np.array(mv_cursor_std).reshape(df.shape[0],1)


# Average Ionic Radius

ir_cursor_mean=[]
ir_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    ir_array = ((np.repeat(average_ionic_radius[df.iloc[i,2]],df.iloc[i,3]), np.repeat(average_ionic_radius[df.iloc[i,4]],df.iloc[i,5])))
    ir_array = np.concatenate(ir_array)

    ir_mean = np.mean(ir_array)
    ir_std = np.std(ir_array)

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

  elif df.iloc[i,1] == 3:
    ir_array = ((np.repeat(average_ionic_radius[df.iloc[i,2]],df.iloc[i,3]), np.repeat(average_ionic_radius[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(average_ionic_radius[df.iloc[i,6]],df.iloc[i,7])))
    ir_array = np.concatenate(ir_array)

    ir_mean = np.mean(ir_array)
    ir_std = np.std(ir_array)

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

  elif df.iloc[i,1] == 4:
    ir_array = ((np.repeat(average_ionic_radius[df.iloc[i,2]],df.iloc[i,3]), np.repeat(average_ionic_radius[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(average_ionic_radius[df.iloc[i,6]],df.iloc[i,7]), np.repeat(average_ionic_radius[df.iloc[i,8]],df.iloc[i,9])))
    ir_array = np.concatenate(ir_array)

    ir_mean = np.mean(ir_array)
    ir_std = np.std(ir_array)

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

ir_mean1 = np.array(ir_cursor_mean).reshape(df.shape[0],1)
ir_std1 = np.array(ir_cursor_std).reshape(df.shape[0],1)


# Polarizability

pz_cursor_mean=[]
pz_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    pz_array = ((np.repeat(polarizability[df.iloc[i,2]],df.iloc[i,3]), np.repeat(polarizability[df.iloc[i,4]],df.iloc[i,5])))
    pz_array = np.concatenate(pz_array)

    pz_mean = np.mean(pz_array)
    pz_std = np.std(pz_array)

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

  elif df.iloc[i,1] == 3:
    pz_array = ((np.repeat(polarizability[df.iloc[i,2]],df.iloc[i,3]), np.repeat(polarizability[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(polarizability[df.iloc[i,6]],df.iloc[i,7])))
    pz_array = np.concatenate(pz_array)

    pz_mean = np.mean(pz_array)
    pz_std = np.std(pz_array)

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

  elif df.iloc[i,1] == 4:
    pz_array = ((np.repeat(polarizability[df.iloc[i,2]],df.iloc[i,3]), np.repeat(polarizability[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(polarizability[df.iloc[i,6]],df.iloc[i,7]), np.repeat(polarizability[df.iloc[i,8]],df.iloc[i,9])))
    pz_array = np.concatenate(pz_array)

    pz_mean = np.mean(pz_array)
    pz_std = np.std(pz_array)

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

pz_mean1 = np.array(pz_cursor_mean).reshape(df.shape[0],1)
pz_std1 = np.array(pz_cursor_std).reshape(df.shape[0],1)


# Specific Heat

sh_cursor_mean=[]
sh_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    sh_array = ((np.repeat(specific_heat[df.iloc[i,2]],df.iloc[i,3]), np.repeat(specific_heat[df.iloc[i,4]],df.iloc[i,5])))
    sh_array = np.concatenate(sh_array)

    sh_mean = np.mean(sh_array)
    sh_std = np.std(sh_array)

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

  elif df.iloc[i,1] == 3:
    sh_array = ((np.repeat(specific_heat[df.iloc[i,2]],df.iloc[i,3]), np.repeat(specific_heat[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(specific_heat[df.iloc[i,6]],df.iloc[i,7])))
    sh_array = np.concatenate(sh_array)

    sh_mean = np.mean(sh_array)
    sh_std = np.std(sh_array)

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

  elif df.iloc[i,1] == 4:
    sh_array = ((np.repeat(specific_heat[df.iloc[i,2]],df.iloc[i,3]), np.repeat(specific_heat[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(specific_heat[df.iloc[i,6]],df.iloc[i,7]), np.repeat(specific_heat[df.iloc[i,8]],df.iloc[i,9])))
    sh_array = np.concatenate(sh_array)

    sh_mean = np.mean(sh_array)
    sh_std = np.std(sh_array)

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

sh_mean1 = np.array(sh_cursor_mean).reshape(df.shape[0],1)
sh_std1 = np.array(sh_cursor_std).reshape(df.shape[0],1)


# Thermal Conductivity

tc_cursor_mean=[]
tc_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,1] == 2:
    tc_array = ((np.repeat(thermal_conductivity[df.iloc[i,2]],df.iloc[i,3]), np.repeat(thermal_conductivity[df.iloc[i,4]],df.iloc[i,5])))
    tc_array = np.concatenate(tc_array)

    tc_mean = np.mean(tc_array)
    tc_std = np.std(tc_array)

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

  elif df.iloc[i,1] == 3:
    tc_array = ((np.repeat(thermal_conductivity[df.iloc[i,2]],df.iloc[i,3]), np.repeat(thermal_conductivity[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(thermal_conductivity[df.iloc[i,6]],df.iloc[i,7])))
    tc_array = np.concatenate(tc_array)

    tc_mean = np.mean(tc_array)
    tc_std = np.std(tc_array)

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

  elif df.iloc[i,1] == 4:
    tc_array = ((np.repeat(thermal_conductivity[df.iloc[i,2]],df.iloc[i,3]), np.repeat(thermal_conductivity[df.iloc[i,4]],df.iloc[i,5]),
                 np.repeat(thermal_conductivity[df.iloc[i,6]],df.iloc[i,7]), np.repeat(thermal_conductivity[df.iloc[i,8]],df.iloc[i,9])))
    tc_array = np.concatenate(tc_array)

    tc_mean = np.mean(tc_array)
    tc_std = np.std(tc_array)

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

tc_mean1 = np.array(tc_cursor_mean).reshape(df.shape[0],1)
tc_std1 = np.array(tc_cursor_std).reshape(df.shape[0],1)

tc_mean1.shape

"""# Precusor 2"""

# Atomic Number

n0=11
n1=12
n2=13
n3=14
n4=15
n5=16
n6=17
n7=18
n8=19



z_cursor_mean=[]
z_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    z_array = ((np.repeat(atomic_no[df.iloc[i,12]],df.iloc[i,13]), np.repeat(atomic_no[df.iloc[i,14]],df.iloc[i,15])))
    z_array = np.concatenate(z_array)

    z_mean = np.mean(z_array)
    z_std = np.std(z_array)

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

  elif df.iloc[i,11] == 3:
    z_array = ((np.repeat(atomic_no[df.iloc[i,12]],df.iloc[i,13]), np.repeat(atomic_no[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(atomic_no[df.iloc[i,16]],df.iloc[i,17])))
    z_array = np.concatenate(z_array)

    z_mean = np.mean(z_array)
    z_std = np.std(z_array)

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

  elif df.iloc[i,11] == 4:
    z_array = ((np.repeat(atomic_no[df.iloc[i,12]],df.iloc[i,13]), np.repeat(atomic_no[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(atomic_no[df.iloc[i,16]],df.iloc[i,17]), np.repeat(atomic_no[df.iloc[i,18]],df.iloc[i,19])))
    z_array = np.concatenate(z_array)

    z_mean = np.mean(z_array)
    z_std = np.std(z_array)

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

z_mean2 = np.array(z_cursor_mean).reshape(df.shape[0],1)
z_std2 = np.array(z_cursor_std).reshape(df.shape[0],1)


# Group Number
gn_cursor_mean=[]
gn_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    gn_array = ((np.repeat(group_no[df.iloc[i,12]],df.iloc[i,13]), np.repeat(group_no[df.iloc[i,14]],df.iloc[i,15])))
    gn_array = np.concatenate(gn_array)

    gn_mean = np.mean(gn_array)
    gn_std = np.std(gn_array)

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)

  elif df.iloc[i,11] == 3:
    gn_array = ((np.repeat(group_no[df.iloc[i,12]],df.iloc[i,13]), np.repeat(group_no[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(group_no[df.iloc[i,16]],df.iloc[i,17])))
    gn_array = np.concatenate(gn_array)

    gn_mean = np.mean(gn_array)
    gn_std = np.std(gn_array)

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)

  elif df.iloc[i,11] == 4:
    gn_array = ((np.repeat(group_no[df.iloc[i,12]],df.iloc[i,13]), np.repeat(group_no[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(group_no[df.iloc[i,16]],df.iloc[i,17]), np.repeat(group_no[df.iloc[i,18]],df.iloc[i,19])))
    gn_array = np.concatenate(gn_array)

    gn_mean = np.mean(gn_array)
    gn_std = np.std(gn_array)

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)

gn_mean2 = np.array(gn_cursor_mean).reshape(df.shape[0],1)
gn_std2 = np.array(gn_cursor_std).reshape(df.shape[0],1)


# Row Number
rn_cursor_mean=[]
rn_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    rn_array = ((np.repeat(row_no[df.iloc[i,12]],df.iloc[i,13]), np.repeat(row_no[df.iloc[i,14]],df.iloc[i,15])))
    rn_array = np.concatenate(rn_array)

    rn_mean = np.mean(rn_array)
    rn_std = np.std(rn_array)

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

  elif df.iloc[i,11] == 3:
    rn_array = ((np.repeat(row_no[df.iloc[i,12]],df.iloc[i,13]), np.repeat(row_no[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(row_no[df.iloc[i,16]],df.iloc[i,17])))
    rn_array = np.concatenate(rn_array)

    rn_mean = np.mean(rn_array)
    rn_std = np.std(rn_array)

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

  elif df.iloc[i,11] == 4:
    rn_array = ((np.repeat(row_no[df.iloc[i,12]],df.iloc[i,13]), np.repeat(row_no[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(row_no[df.iloc[i,16]],df.iloc[i,17]), np.repeat(row_no[df.iloc[i,18]],df.iloc[i,19])))
    rn_array = np.concatenate(rn_array)

    rn_mean = np.mean(rn_array)
    rn_std = np.std(rn_array)

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

rn_mean2 = np.array(rn_cursor_mean).reshape(df.shape[0],1)
rn_std2 = np.array(rn_cursor_std).reshape(df.shape[0],1)


# Valence

vl_cursor_mean=[]
vl_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    vl_array = ((np.repeat(valence[df.iloc[i,12]],df.iloc[i,13]), np.repeat(valence[df.iloc[i,14]],df.iloc[i,15])))
    vl_array = np.concatenate(vl_array)

    vl_mean = np.mean(vl_array)
    vl_std = np.std(vl_array)

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

  elif df.iloc[i,11] == 3:
    vl_array = ((np.repeat(valence[df.iloc[i,12]],df.iloc[i,13]), np.repeat(valence[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(valence[df.iloc[i,16]],df.iloc[i,17])))
    vl_array = np.concatenate(vl_array)

    vl_mean = np.mean(vl_array)
    vl_std = np.std(vl_array)

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

  elif df.iloc[i,11] == 4:
    vl_array = ((np.repeat(valence[df.iloc[i,12]],df.iloc[i,13]), np.repeat(valence[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(valence[df.iloc[i,16]],df.iloc[i,17]), np.repeat(valence[df.iloc[i,18]],df.iloc[i,19])))
    vl_array = np.concatenate(vl_array)

    vl_mean = np.mean(vl_array)
    vl_std = np.std(vl_array)

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

vl_mean2 = np.array(vl_cursor_mean).reshape(df.shape[0],1)
vl_std2 = np.array(vl_cursor_std).reshape(df.shape[0],1)


# Block

bk_cursor_mean=[]
bk_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    bk_array = ((np.repeat(block[df.iloc[i,12]],df.iloc[i,13]), np.repeat(block[df.iloc[i,14]],df.iloc[i,15])))
    bk_array = np.concatenate(bk_array)

    bk_mean = np.mean(bk_array)
    bk_std = np.std(bk_array)

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

  elif df.iloc[i,11] == 3:
    bk_array = ((np.repeat(block[df.iloc[i,12]],df.iloc[i,13]), np.repeat(block[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(block[df.iloc[i,16]],df.iloc[i,17])))
    bk_array = np.concatenate(bk_array)

    bk_mean = np.mean(bk_array)
    bk_std = np.std(bk_array)

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

  elif df.iloc[i,11] == 4:
    bk_array = ((np.repeat(block[df.iloc[i,12]],df.iloc[i,13]), np.repeat(block[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(block[df.iloc[i,16]],df.iloc[i,17]), np.repeat(block[df.iloc[i,18]],df.iloc[i,19])))
    bk_array = np.concatenate(bk_array)

    bk_mean = np.mean(bk_array)
    bk_std = np.std(bk_array)

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

bk_mean2 = np.array(bk_cursor_mean).reshape(df.shape[0],1)
bk_std2 = np.array(bk_cursor_std).reshape(df.shape[0],1)


# Electronegativity

x_cursor_mean=[]
x_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    x_array = ((np.repeat(electronegativity[df.iloc[i,12]],df.iloc[i,13]), np.repeat(electronegativity[df.iloc[i,14]],df.iloc[i,15])))
    x_array = np.concatenate(x_array)

    x_mean = np.mean(x_array)
    x_std = np.std(x_array)

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

  elif df.iloc[i,11] == 3:
    x_array = ((np.repeat(electronegativity[df.iloc[i,12]],df.iloc[i,13]), np.repeat(electronegativity[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(electronegativity[df.iloc[i,16]],df.iloc[i,17])))
    x_array = np.concatenate(x_array)

    x_mean = np.mean(x_array)
    x_std = np.std(x_array)

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

  elif df.iloc[i,11] == 4:
    x_array = ((np.repeat(electronegativity[df.iloc[i,12]],df.iloc[i,13]), np.repeat(electronegativity[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(electronegativity[df.iloc[i,16]],df.iloc[i,17]), np.repeat(electronegativity[df.iloc[i,18]],df.iloc[i,19])))
    x_array = np.concatenate(x_array)

    x_mean = np.mean(x_array)
    x_std = np.std(x_array)

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

x_mean2 = np.array(x_cursor_mean).reshape(df.shape[0],1)
x_std2 = np.array(x_cursor_std).reshape(df.shape[0],1)


# Covalent Radius

cr_cursor_mean=[]
cr_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    cr_array = ((np.repeat(covalent_radius[df.iloc[i,12]],df.iloc[i,13]), np.repeat(covalent_radius[df.iloc[i,14]],df.iloc[i,15])))
    cr_array = np.concatenate(cr_array)

    cr_mean = np.mean(cr_array)
    cr_std = np.std(cr_array)

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

  elif df.iloc[i,11] == 3:
    cr_array = ((np.repeat(covalent_radius[df.iloc[i,12]],df.iloc[i,13]), np.repeat(covalent_radius[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(covalent_radius[df.iloc[i,16]],df.iloc[i,17])))
    cr_array = np.concatenate(cr_array)

    cr_mean = np.mean(cr_array)
    cr_std = np.std(cr_array)

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

  elif df.iloc[i,11] == 4:
    cr_array = ((np.repeat(covalent_radius[df.iloc[i,12]],df.iloc[i,13]), np.repeat(covalent_radius[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(covalent_radius[df.iloc[i,16]],df.iloc[i,17]), np.repeat(covalent_radius[df.iloc[i,18]],df.iloc[i,19])))
    cr_array = np.concatenate(cr_array)

    cr_mean = np.mean(cr_array)
    cr_std = np.std(cr_array)

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

cr_mean2 = np.array(cr_cursor_mean).reshape(df.shape[0],1)
cr_std2 = np.array(cr_cursor_std).reshape(df.shape[0],1)


# Ionization Energy

ie_cursor_mean=[]
ie_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    ie_array = ((np.repeat(ionization_energy[df.iloc[i,12]],df.iloc[i,13]), np.repeat(ionization_energy[df.iloc[i,14]],df.iloc[i,15])))
    ie_array = np.concatenate(ie_array)

    ie_mean = np.mean(ie_array)
    ie_std = np.std(ie_array)

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

  elif df.iloc[i,11] == 3:
    ie_array = ((np.repeat(ionization_energy[df.iloc[i,12]],df.iloc[i,13]), np.repeat(ionization_energy[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(ionization_energy[df.iloc[i,16]],df.iloc[i,17])))
    ie_array = np.concatenate(ie_array)

    ie_mean = np.mean(ie_array)
    ie_std = np.std(ie_array)

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

  elif df.iloc[i,11] == 4:
    ie_array = ((np.repeat(ionization_energy[df.iloc[i,12]],df.iloc[i,13]), np.repeat(ionization_energy[df.iloc[i,14]],df.iloc[i,15]),
                np.repeat(ionization_energy[df.iloc[i,16]],df.iloc[i,17]), np.repeat(ionization_energy[df.iloc[i,18]],df.iloc[i,19])))
    ie_array = np.concatenate(ie_array)

    ie_mean = np.mean(ie_array)
    ie_std = np.std(ie_array)

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

ie_mean2 = np.array(ie_cursor_mean).reshape(df.shape[0],1)
ie_std2 = np.array(ie_cursor_std).reshape(df.shape[0],1)


# Electron Affinity

ea_cursor_mean=[]
ea_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    ea_array = ((np.repeat(electron_affinity[df.iloc[i,12]],df.iloc[i,13]), np.repeat(electron_affinity[df.iloc[i,14]],df.iloc[i,15])))
    ea_array = np.concatenate(ea_array)

    ea_mean = np.mean(ea_array)
    ea_std = np.std(ea_array)

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

  elif df.iloc[i,11] == 3:
    ea_array = ((np.repeat(electron_affinity[df.iloc[i,12]],df.iloc[i,13]), np.repeat(electron_affinity[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(electron_affinity[df.iloc[i,16]],df.iloc[i,17])))
    ea_array = np.concatenate(ea_array)

    ea_mean = np.mean(ea_array)
    ea_std = np.std(ea_array)

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

  elif df.iloc[i,11] == 4:
    ea_array = ((np.repeat(electron_affinity[df.iloc[i,12]],df.iloc[i,13]), np.repeat(electron_affinity[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(electron_affinity[df.iloc[i,16]],df.iloc[i,17]), np.repeat(electron_affinity[df.iloc[i,18]],df.iloc[i,19])))
    ea_array = np.concatenate(ea_array)

    ea_mean = np.mean(ea_array)
    ea_std = np.std(ea_array)

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

ea_mean2 = np.array(ea_cursor_mean).reshape(df.shape[0],1)
ea_std2 = np.array(ea_cursor_std).reshape(df.shape[0],1)


# Molar Volume

mv_cursor_mean=[]
mv_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    mv_array = ((np.repeat(molar_volume[df.iloc[i,12]],df.iloc[i,13]), np.repeat(molar_volume[df.iloc[i,14]],df.iloc[i,15])))
    mv_array = np.concatenate(mv_array)

    mv_mean = np.mean(mv_array)
    mv_std = np.std(mv_array)

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

  elif df.iloc[i,11] == 3:
    mv_array = ((np.repeat(molar_volume[df.iloc[i,12]],df.iloc[i,13]), np.repeat(molar_volume[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(molar_volume[df.iloc[i,16]],df.iloc[i,17])))
    mv_array = np.concatenate(mv_array)

    mv_mean = np.mean(mv_array)
    mv_std = np.std(mv_array)

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

  elif df.iloc[i,11] == 4:
    mv_array = ((np.repeat(molar_volume[df.iloc[i,12]],df.iloc[i,13]), np.repeat(molar_volume[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(molar_volume[df.iloc[i,16]],df.iloc[i,17]), np.repeat(molar_volume[df.iloc[i,18]],df.iloc[i,19])))
    mv_array = np.concatenate(mv_array)

    mv_mean = np.mean(mv_array)
    mv_std = np.std(mv_array)

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

mv_mean2 = np.array(mv_cursor_mean).reshape(df.shape[0],1)
mv_std2 = np.array(mv_cursor_std).reshape(df.shape[0],1)


# Average Ionic Radius

ir_cursor_mean=[]
ir_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    ir_array = ((np.repeat(average_ionic_radius[df.iloc[i,12]],df.iloc[i,13]), np.repeat(average_ionic_radius[df.iloc[i,14]],df.iloc[i,15])))
    ir_array = np.concatenate(ir_array)

    ir_mean = np.mean(ir_array)
    ir_std = np.std(ir_array)

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

  elif df.iloc[i,11] == 3:
    ir_array = ((np.repeat(average_ionic_radius[df.iloc[i,12]],df.iloc[i,13]), np.repeat(average_ionic_radius[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(average_ionic_radius[df.iloc[i,16]],df.iloc[i,17])))
    ir_array = np.concatenate(ir_array)

    ir_mean = np.mean(ir_array)
    ir_std = np.std(ir_array)

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

  elif df.iloc[i,11] == 4:
    ir_array = ((np.repeat(average_ionic_radius[df.iloc[i,12]],df.iloc[i,13]), np.repeat(average_ionic_radius[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(average_ionic_radius[df.iloc[i,16]],df.iloc[i,17]), np.repeat(average_ionic_radius[df.iloc[i,18]],df.iloc[i,19])))
    ir_array = np.concatenate(ir_array)

    ir_mean = np.mean(ir_array)
    ir_std = np.std(ir_array)

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

ir_mean2 = np.array(ir_cursor_mean).reshape(df.shape[0],1)
ir_std2 = np.array(ir_cursor_std).reshape(df.shape[0],1)


# Polarizability

pz_cursor_mean=[]
pz_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    pz_array = ((np.repeat(polarizability[df.iloc[i,12]],df.iloc[i,13]), np.repeat(polarizability[df.iloc[i,14]],df.iloc[i,15])))
    pz_array = np.concatenate(pz_array)

    pz_mean = np.mean(pz_array)
    pz_std = np.std(pz_array)

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

  elif df.iloc[i,11] == 3:
    pz_array = ((np.repeat(polarizability[df.iloc[i,12]],df.iloc[i,13]), np.repeat(polarizability[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(polarizability[df.iloc[i,16]],df.iloc[i,17])))
    pz_array = np.concatenate(pz_array)

    pz_mean = np.mean(pz_array)
    pz_std = np.std(pz_array)

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

  elif df.iloc[i,11] == 4:
    pz_array = ((np.repeat(polarizability[df.iloc[i,12]],df.iloc[i,13]), np.repeat(polarizability[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(polarizability[df.iloc[i,16]],df.iloc[i,17]), np.repeat(polarizability[df.iloc[i,18]],df.iloc[i,19])))
    pz_array = np.concatenate(pz_array)

    pz_mean = np.mean(pz_array)
    pz_std = np.std(pz_array)

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

pz_mean2 = np.array(pz_cursor_mean).reshape(df.shape[0],1)
pz_std2 = np.array(pz_cursor_std).reshape(df.shape[0],1)


# Specific Heat

sh_cursor_mean=[]
sh_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    sh_array = ((np.repeat(specific_heat[df.iloc[i,12]],df.iloc[i,13]), np.repeat(specific_heat[df.iloc[i,14]],df.iloc[i,15])))
    sh_array = np.concatenate(sh_array)

    sh_mean = np.mean(sh_array)
    sh_std = np.std(sh_array)

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

  elif df.iloc[i,11] == 3:
    sh_array = ((np.repeat(specific_heat[df.iloc[i,12]],df.iloc[i,13]), np.repeat(specific_heat[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(specific_heat[df.iloc[i,16]],df.iloc[i,17])))
    sh_array = np.concatenate(sh_array)

    sh_mean = np.mean(sh_array)
    sh_std = np.std(sh_array)

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

  elif df.iloc[i,11] == 4:
    sh_array = ((np.repeat(specific_heat[df.iloc[i,12]],df.iloc[i,13]), np.repeat(specific_heat[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(specific_heat[df.iloc[i,16]],df.iloc[i,17]), np.repeat(specific_heat[df.iloc[i,18]],df.iloc[i,19])))
    sh_array = np.concatenate(sh_array)

    sh_mean = np.mean(sh_array)
    sh_std = np.std(sh_array)

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

sh_mean2 = np.array(sh_cursor_mean).reshape(df.shape[0],1)
sh_std2 = np.array(sh_cursor_std).reshape(df.shape[0],1)


# Thermal Conductivity

tc_cursor_mean=[]
tc_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,11] == 2:
    tc_array = ((np.repeat(thermal_conductivity[df.iloc[i,12]],df.iloc[i,13]), np.repeat(thermal_conductivity[df.iloc[i,14]],df.iloc[i,15])))
    tc_array = np.concatenate(tc_array)

    tc_mean = np.mean(tc_array)
    tc_std = np.std(tc_array)

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

  elif df.iloc[i,11] == 3:
    tc_array = ((np.repeat(thermal_conductivity[df.iloc[i,12]],df.iloc[i,13]), np.repeat(thermal_conductivity[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(thermal_conductivity[df.iloc[i,16]],df.iloc[i,17])))
    tc_array = np.concatenate(tc_array)

    tc_mean = np.mean(tc_array)
    tc_std = np.std(tc_array)

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

  elif df.iloc[i,11] == 4:
    tc_array = ((np.repeat(thermal_conductivity[df.iloc[i,12]],df.iloc[i,13]), np.repeat(thermal_conductivity[df.iloc[i,14]],df.iloc[i,15]),
                 np.repeat(thermal_conductivity[df.iloc[i,16]],df.iloc[i,17]), np.repeat(thermal_conductivity[df.iloc[i,18]],df.iloc[i,19])))
    tc_array = np.concatenate(tc_array)

    tc_mean = np.mean(tc_array)
    tc_std = np.std(tc_array)

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

tc_mean2 = np.array(tc_cursor_mean).reshape(df.shape[0],1)
tc_std2 = np.array(tc_cursor_std).reshape(df.shape[0],1)

tc_mean2.shape

"""# Precursor 3"""

# Atomic Number

n0=21
n1=22
n2=23
n3=24
n4=25
n5=26
n6=27


z_cursor_mean=[]
z_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    z_array = ((np.repeat(atomic_no[df.iloc[i,22]],df.iloc[i,23]), np.repeat(atomic_no[df.iloc[i,24]],df.iloc[i,25])))
    z_array = np.concatenate(z_array)

    z_mean = np.mean(z_array)
    z_std = np.std(z_array)

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

  elif df.iloc[i,21] == 3:
    z_array = ((np.repeat(atomic_no[df.iloc[i,22]],df.iloc[i,23]), np.repeat(atomic_no[df.iloc[i,24]],df.iloc[i,25]),
                np.repeat(atomic_no[df.iloc[i,26]],df.iloc[i,27])))
    z_array = np.concatenate(z_array)

    z_mean = np.mean(z_array)
    z_std = np.std(z_array)

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

  elif df.iloc[i,21] == 0:
    z_mean = 0
    z_std = 0

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

z_mean3 = np.array(z_cursor_mean).reshape(df.shape[0],1)
z_std3 = np.array(z_cursor_std).reshape(df.shape[0],1)


# Group Number
gn_cursor_mean=[]
gn_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    gn_array = ((np.repeat(group_no[df.iloc[i,22]],df.iloc[i,23]), np.repeat(group_no[df.iloc[i,24]],df.iloc[i,25])))
    gn_array = np.concatenate(gn_array)

    gn_mean = np.mean(gn_array)
    gn_std = np.std(gn_array)

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)

  elif df.iloc[i,21] == 3:
    gn_array = ((np.repeat(group_no[df.iloc[i,22]],df.iloc[i,23]), np.repeat(group_no[df.iloc[i,24]],df.iloc[i,25]),
                np.repeat(group_no[df.iloc[i,26]],df.iloc[i,27])))
    gn_array = np.concatenate(gn_array)

    gn_mean = np.mean(gn_array)
    gn_std = np.std(gn_array)

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)

  elif df.iloc[i,21] == 0:
    gn_mean = 0
    gn_std = 0

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)


gn_mean3 = np.array(gn_cursor_mean).reshape(df.shape[0],1)
gn_std3 = np.array(gn_cursor_std).reshape(df.shape[0],1)


# Row Number
rn_cursor_mean=[]
rn_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    rn_array = ((np.repeat(row_no[df.iloc[i,22]],df.iloc[i,23]), np.repeat(row_no[df.iloc[i,24]],df.iloc[i,25])))
    rn_array = np.concatenate(rn_array)

    rn_mean = np.mean(rn_array)
    rn_std = np.std(rn_array)

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

  elif df.iloc[i,21] == 3:
    rn_array = ((np.repeat(row_no[df.iloc[i,22]],df.iloc[i,23]), np.repeat(row_no[df.iloc[i,24]],df.iloc[i,25]),
                np.repeat(row_no[df.iloc[i,26]],df.iloc[i,27])))
    rn_array = np.concatenate(rn_array)

    rn_mean = np.mean(rn_array)
    rn_std = np.std(rn_array)

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

  elif df.iloc[i,21] == 0:
    rn_mean = 0
    rn_std = 0

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

rn_mean3 = np.array(rn_cursor_mean).reshape(df.shape[0],1)
rn_std3 = np.array(rn_cursor_std).reshape(df.shape[0],1)


# Valence

vl_cursor_mean=[]
vl_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    vl_array = ((np.repeat(valence[df.iloc[i,22]],df.iloc[i,23]), np.repeat(valence[df.iloc[i,24]],df.iloc[i,25])))
    vl_array = np.concatenate(vl_array)

    vl_mean = np.mean(vl_array)
    vl_std = np.std(vl_array)

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

  elif df.iloc[i,21] == 3:
    vl_array = ((np.repeat(valence[df.iloc[i,22]],df.iloc[i,23]), np.repeat(valence[df.iloc[i,24]],df.iloc[i,25]),
                np.repeat(valence[df.iloc[i,26]],df.iloc[i,27])))
    vl_array = np.concatenate(vl_array)

    vl_mean = np.mean(vl_array)
    vl_std = np.std(vl_array)

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

  elif df.iloc[i,21] == 0:
    vl_mean = 0
    vl_std = 0

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

vl_mean3 = np.array(vl_cursor_mean).reshape(df.shape[0],1)
vl_std3 = np.array(vl_cursor_std).reshape(df.shape[0],1)


# Block

bk_cursor_mean=[]
bk_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    bk_array = ((np.repeat(block[df.iloc[i,22]],df.iloc[i,23]), np.repeat(block[df.iloc[i,24]],df.iloc[i,25])))
    bk_array = np.concatenate(bk_array)

    bk_mean = np.mean(bk_array)
    bk_std = np.std(bk_array)

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

  elif df.iloc[i,21] == 3:
    bk_array = ((np.repeat(block[df.iloc[i,22]],df.iloc[i,23]), np.repeat(block[df.iloc[i,24]],df.iloc[i,25]),
                np.repeat(block[df.iloc[i,26]],df.iloc[i,27])))
    bk_array = np.concatenate(bk_array)

    bk_mean = np.mean(bk_array)
    bk_std = np.std(bk_array)

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

  elif df.iloc[i,21] == 0:
    bk_mean = 0
    bk_std = 0

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

bk_mean3 = np.array(bk_cursor_mean).reshape(df.shape[0],1)
bk_std3 = np.array(bk_cursor_std).reshape(df.shape[0],1)


# Electronegativity

x_cursor_mean=[]
x_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    x_array = ((np.repeat(electronegativity[df.iloc[i,22]],df.iloc[i,23]), np.repeat(electronegativity[df.iloc[i,24]],df.iloc[i,25])))
    x_array = np.concatenate(x_array)

    x_mean = np.mean(x_array)
    x_std = np.std(x_array)

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

  elif df.iloc[i,21] == 3:
    x_array = ((np.repeat(electronegativity[df.iloc[i,22]],df.iloc[i,23]), np.repeat(electronegativity[df.iloc[i,24]],df.iloc[i,25]),
                np.repeat(electronegativity[df.iloc[i,26]],df.iloc[i,27])))
    x_array = np.concatenate(x_array)

    x_mean = np.mean(x_array)
    x_std = np.std(x_array)

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

  elif df.iloc[i,21] == 0:
    x_mean = 0
    x_std = 0

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

x_mean3 = np.array(x_cursor_mean).reshape(df.shape[0],1)
x_std3 = np.array(x_cursor_std).reshape(df.shape[0],1)


# Covalent Radius

cr_cursor_mean=[]
cr_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    cr_array = ((np.repeat(covalent_radius[df.iloc[i,22]],df.iloc[i,23]), np.repeat(covalent_radius[df.iloc[i,24]],df.iloc[i,25])))
    cr_array = np.concatenate(cr_array)

    cr_mean = np.mean(cr_array)
    cr_std = np.std(cr_array)

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

  elif df.iloc[i,21] == 3:
    cr_array = ((np.repeat(covalent_radius[df.iloc[i,22]],df.iloc[i,23]), np.repeat(covalent_radius[df.iloc[i,24]],df.iloc[i,25]),
                 np.repeat(covalent_radius[df.iloc[i,26]],df.iloc[i,27])))
    cr_array = np.concatenate(cr_array)

    cr_mean = np.mean(cr_array)
    cr_std = np.std(cr_array)

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

  elif df.iloc[i,21] == 0:
    cr_mean = 0
    cr_std = 0

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

cr_mean3 = np.array(cr_cursor_mean).reshape(df.shape[0],1)
cr_std3 = np.array(cr_cursor_std).reshape(df.shape[0],1)


# Ionization Energy

ie_cursor_mean=[]
ie_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    ie_array = ((np.repeat(ionization_energy[df.iloc[i,22]],df.iloc[i,23]), np.repeat(ionization_energy[df.iloc[i,24]],df.iloc[i,25])))
    ie_array = np.concatenate(ie_array)

    ie_mean = np.mean(ie_array)
    ie_std = np.std(ie_array)

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

  elif df.iloc[i,21] == 3:
    ie_array = ((np.repeat(ionization_energy[df.iloc[i,22]],df.iloc[i,23]), np.repeat(ionization_energy[df.iloc[i,24]],df.iloc[i,25]),
                np.repeat(ionization_energy[df.iloc[i,26]],df.iloc[i,27])))
    ie_array = np.concatenate(ie_array)

    ie_mean = np.mean(ie_array)
    ie_std = np.std(ie_array)

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

  elif df.iloc[i,21] == 0:
    ie_mean = 0
    ie_std = 0

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

ie_mean3 = np.array(ie_cursor_mean).reshape(df.shape[0],1)
ie_std3 = np.array(ie_cursor_std).reshape(df.shape[0],1)


# Electron Affinity

ea_cursor_mean=[]
ea_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    ea_array = ((np.repeat(electron_affinity[df.iloc[i,22]],df.iloc[i,23]), np.repeat(electron_affinity[df.iloc[i,24]],df.iloc[i,25])))
    ea_array = np.concatenate(ea_array)

    ea_mean = np.mean(ea_array)
    ea_std = np.std(ea_array)

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

  elif df.iloc[i,21] == 3:
    ea_array = ((np.repeat(electron_affinity[df.iloc[i,22]],df.iloc[i,23]), np.repeat(electron_affinity[df.iloc[i,24]],df.iloc[i,25]),
                 np.repeat(electron_affinity[df.iloc[i,26]],df.iloc[i,27])))
    ea_array = np.concatenate(ea_array)

    ea_mean = np.mean(ea_array)
    ea_std = np.std(ea_array)

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

  elif df.iloc[i,21] == 0:
    ea_mean = 0
    ea_std = 0

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

ea_mean3 = np.array(ea_cursor_mean).reshape(df.shape[0],1)
ea_std3 = np.array(ea_cursor_std).reshape(df.shape[0],1)


# Molar Volume

mv_cursor_mean=[]
mv_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    mv_array = ((np.repeat(molar_volume[df.iloc[i,22]],df.iloc[i,23]), np.repeat(molar_volume[df.iloc[i,24]],df.iloc[i,25])))
    mv_array = np.concatenate(mv_array)

    mv_mean = np.mean(mv_array)
    mv_std = np.std(mv_array)

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

  elif df.iloc[i,21] == 3:
    mv_array = ((np.repeat(molar_volume[df.iloc[i,22]],df.iloc[i,23]), np.repeat(molar_volume[df.iloc[i,24]],df.iloc[i,25]),
                 np.repeat(molar_volume[df.iloc[i,26]],df.iloc[i,27])))
    mv_array = np.concatenate(mv_array)

    mv_mean = np.mean(mv_array)
    mv_std = np.std(mv_array)

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

  elif df.iloc[i,21] == 0:
    mv_mean = 0
    mv_std = 0

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

mv_mean3 = np.array(mv_cursor_mean).reshape(df.shape[0],1)
mv_std3 = np.array(mv_cursor_std).reshape(df.shape[0],1)


# Average Ionic Radius

ir_cursor_mean=[]
ir_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    ir_array = ((np.repeat(average_ionic_radius[df.iloc[i,22]],df.iloc[i,23]), np.repeat(average_ionic_radius[df.iloc[i,24]],df.iloc[i,25])))
    ir_array = np.concatenate(ir_array)

    ir_mean = np.mean(ir_array)
    ir_std = np.std(ir_array)

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

  elif df.iloc[i,21] == 3:
    ir_array = ((np.repeat(average_ionic_radius[df.iloc[i,22]],df.iloc[i,23]), np.repeat(average_ionic_radius[df.iloc[i,24]],df.iloc[i,25]),
                 np.repeat(average_ionic_radius[df.iloc[i,26]],df.iloc[i,27])))
    ir_array = np.concatenate(ir_array)

    ir_mean = np.mean(ir_array)
    ir_std = np.std(ir_array)

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

  elif df.iloc[i,21] == 0:
    ir_mean = 0
    ir_std = 0

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

ir_mean3 = np.array(ir_cursor_mean).reshape(df.shape[0],1)
ir_std3 = np.array(ir_cursor_std).reshape(df.shape[0],1)


# Polarizability

pz_cursor_mean=[]
pz_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    pz_array = ((np.repeat(polarizability[df.iloc[i,22]],df.iloc[i,23]), np.repeat(polarizability[df.iloc[i,24]],df.iloc[i,25])))
    pz_array = np.concatenate(pz_array)

    pz_mean = np.mean(pz_array)
    pz_std = np.std(pz_array)

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

  elif df.iloc[i,21] == 3:
    pz_array = ((np.repeat(polarizability[df.iloc[i,22]],df.iloc[i,23]), np.repeat(polarizability[df.iloc[i,24]],df.iloc[i,25]),
                 np.repeat(polarizability[df.iloc[i,26]],df.iloc[i,27])))
    pz_array = np.concatenate(pz_array)

    pz_mean = np.mean(pz_array)
    pz_std = np.std(pz_array)

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

  elif df.iloc[i,21] == 0:
    pz_mean = 0
    pz_std = 0

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

pz_mean3 = np.array(pz_cursor_mean).reshape(df.shape[0],1)
pz_std3 = np.array(pz_cursor_std).reshape(df.shape[0],1)


# Specific Heat

sh_cursor_mean=[]
sh_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    sh_array = ((np.repeat(specific_heat[df.iloc[i,22]],df.iloc[i,23]), np.repeat(specific_heat[df.iloc[i,24]],df.iloc[i,25])))
    sh_array = np.concatenate(sh_array)

    sh_mean = np.mean(sh_array)
    sh_std = np.std(sh_array)

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

  elif df.iloc[i,21] == 3:
    sh_array = ((np.repeat(specific_heat[df.iloc[i,22]],df.iloc[i,23]), np.repeat(specific_heat[df.iloc[i,24]],df.iloc[i,25]),
                 np.repeat(specific_heat[df.iloc[i,26]],df.iloc[i,27])))
    sh_array = np.concatenate(sh_array)

    sh_mean = np.mean(sh_array)
    sh_std = np.std(sh_array)

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

  elif df.iloc[i,21] == 0:
    sh_mean = 0
    sh_std = 0

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

sh_mean3 = np.array(sh_cursor_mean).reshape(df.shape[0],1)
sh_std3 = np.array(sh_cursor_std).reshape(df.shape[0],1)


# Thermal Conductivity

tc_cursor_mean=[]
tc_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,21] == 2:
    tc_array = ((np.repeat(thermal_conductivity[df.iloc[i,22]],df.iloc[i,23]), np.repeat(thermal_conductivity[df.iloc[i,24]],df.iloc[i,25])))
    tc_array = np.concatenate(tc_array)

    tc_mean = np.mean(tc_array)
    tc_std = np.std(tc_array)

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

  elif df.iloc[i,21] == 3:
    tc_array = ((np.repeat(thermal_conductivity[df.iloc[i,22]],df.iloc[i,23]), np.repeat(thermal_conductivity[df.iloc[i,24]],df.iloc[i,25]),
                 np.repeat(thermal_conductivity[df.iloc[i,26]],df.iloc[i,27])))
    tc_array = np.concatenate(tc_array)

    tc_mean = np.mean(tc_array)
    tc_std = np.std(tc_array)

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

  elif df.iloc[i,21] == 0:
    tc_mean = 0
    tc_std = 0

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

tc_mean3 = np.array(tc_cursor_mean).reshape(df.shape[0],1)
tc_std3 = np.array(tc_cursor_std).reshape(df.shape[0],1)

tc_mean3.shape

"""# Precursor 4"""

# Atomic Number

n0=29
n1=30
n2=31
n3=32
n4=33



z_cursor_mean=[]
z_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    z_array = ((np.repeat(atomic_no[df.iloc[i,30]],df.iloc[i,31]), np.repeat(atomic_no[df.iloc[i,32]],df.iloc[i,33])))
    z_array = np.concatenate(z_array)

    z_mean = np.mean(z_array)
    z_std = np.std(z_array)

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

  elif df.iloc[i,29] == 0:
    z_mean = 0
    z_std = 0

    z_cursor_mean.append(z_mean)
    z_cursor_std.append(z_std)

z_mean4 = np.array(z_cursor_mean).reshape(df.shape[0],1)
z_std4 = np.array(z_cursor_std).reshape(df.shape[0],1)


# Group Number
gn_cursor_mean=[]
gn_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    gn_array = ((np.repeat(group_no[df.iloc[i,30]],df.iloc[i,31]), np.repeat(group_no[df.iloc[i,32]],df.iloc[i,33])))
    gn_array = np.concatenate(gn_array)

    gn_mean = np.mean(gn_array)
    gn_std = np.std(gn_array)

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)

  elif df.iloc[i,29] == 0:
    gn_mean = 0
    gn_std = 0

    gn_cursor_mean.append(gn_mean)
    gn_cursor_std.append(gn_std)


gn_mean4 = np.array(gn_cursor_mean).reshape(df.shape[0],1)
gn_std4 = np.array(gn_cursor_std).reshape(df.shape[0],1)


# Row Number
rn_cursor_mean=[]
rn_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    rn_array = ((np.repeat(row_no[df.iloc[i,30]],df.iloc[i,31]), np.repeat(row_no[df.iloc[i,32]],df.iloc[i,33])))
    rn_array = np.concatenate(rn_array)

    rn_mean = np.mean(rn_array)
    rn_std = np.std(rn_array)

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

  elif df.iloc[i,29] == 0:
    rn_mean = 0
    rn_std = 0

    rn_cursor_mean.append(rn_mean)
    rn_cursor_std.append(rn_std)

rn_mean4 = np.array(rn_cursor_mean).reshape(df.shape[0],1)
rn_std4 = np.array(rn_cursor_std).reshape(df.shape[0],1)


# Valence

vl_cursor_mean=[]
vl_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    vl_array = ((np.repeat(valence[df.iloc[i,30]],df.iloc[i,31]), np.repeat(valence[df.iloc[i,32]],df.iloc[i,33])))
    vl_array = np.concatenate(vl_array)

    vl_mean = np.mean(vl_array)
    vl_std = np.std(vl_array)

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

  elif df.iloc[i,29] == 0:
    vl_mean = 0
    vl_std = 0

    vl_cursor_mean.append(vl_mean)
    vl_cursor_std.append(vl_std)

vl_mean4 = np.array(vl_cursor_mean).reshape(df.shape[0],1)
vl_std4 = np.array(vl_cursor_std).reshape(df.shape[0],1)


# Block

bk_cursor_mean=[]
bk_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    bk_array = ((np.repeat(block[df.iloc[i,30]],df.iloc[i,31]), np.repeat(block[df.iloc[i,32]],df.iloc[i,33])))
    bk_array = np.concatenate(bk_array)

    bk_mean = np.mean(bk_array)
    bk_std = np.std(bk_array)

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

  elif df.iloc[i,29] == 0:
    bk_mean = 0
    bk_std = 0

    bk_cursor_mean.append(bk_mean)
    bk_cursor_std.append(bk_std)

bk_mean4 = np.array(bk_cursor_mean).reshape(df.shape[0],1)
bk_std4 = np.array(bk_cursor_std).reshape(df.shape[0],1)


# Electronegativity

x_cursor_mean=[]
x_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    x_array = ((np.repeat(electronegativity[df.iloc[i,30]],df.iloc[i,31]), np.repeat(electronegativity[df.iloc[i,32]],df.iloc[i,33])))
    x_array = np.concatenate(x_array)

    x_mean = np.mean(x_array)
    x_std = np.std(x_array)

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

  elif df.iloc[i,29] == 0:
    x_mean = 0
    x_std = 0

    x_cursor_mean.append(x_mean)
    x_cursor_std.append(x_std)

x_mean4 = np.array(x_cursor_mean).reshape(df.shape[0],1)
x_std4 = np.array(x_cursor_std).reshape(df.shape[0],1)


# Covalent Radius

cr_cursor_mean=[]
cr_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    cr_array = ((np.repeat(covalent_radius[df.iloc[i,30]],df.iloc[i,31]), np.repeat(covalent_radius[df.iloc[i,32]],df.iloc[i,33])))
    cr_array = np.concatenate(cr_array)

    cr_mean = np.mean(cr_array)
    cr_std = np.std(cr_array)

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

  elif df.iloc[i,29] == 0:
    cr_mean = 0
    cr_std = 0

    cr_cursor_mean.append(cr_mean)
    cr_cursor_std.append(cr_std)

cr_mean4 = np.array(cr_cursor_mean).reshape(df.shape[0],1)
cr_std4 = np.array(cr_cursor_std).reshape(df.shape[0],1)


# Ionization Energy

ie_cursor_mean=[]
ie_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    ie_array = ((np.repeat(ionization_energy[df.iloc[i,30]],df.iloc[i,31]), np.repeat(ionization_energy[df.iloc[i,32]],df.iloc[i,33])))
    ie_array = np.concatenate(ie_array)

    ie_mean = np.mean(ie_array)
    ie_std = np.std(ie_array)

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

  elif df.iloc[i,29] == 0:
    ie_mean = 0
    ie_std = 0

    ie_cursor_mean.append(ie_mean)
    ie_cursor_std.append(ie_std)

ie_mean4 = np.array(ie_cursor_mean).reshape(df.shape[0],1)
ie_std4 = np.array(ie_cursor_std).reshape(df.shape[0],1)


# Electron Affinity

ea_cursor_mean=[]
ea_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    ea_array = ((np.repeat(electron_affinity[df.iloc[i,30]],df.iloc[i,31]), np.repeat(electron_affinity[df.iloc[i,32]],df.iloc[i,33])))
    ea_array = np.concatenate(ea_array)

    ea_mean = np.mean(ea_array)
    ea_std = np.std(ea_array)

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

  elif df.iloc[i,29] == 0:
    ea_mean = 0
    ea_std = 0

    ea_cursor_mean.append(ea_mean)
    ea_cursor_std.append(ea_std)

ea_mean4 = np.array(ea_cursor_mean).reshape(df.shape[0],1)
ea_std4 = np.array(ea_cursor_std).reshape(df.shape[0],1)


# Molar Volume

mv_cursor_mean=[]
mv_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    mv_array = ((np.repeat(molar_volume[df.iloc[i,30]],df.iloc[i,31]), np.repeat(molar_volume[df.iloc[i,32]],df.iloc[i,33])))
    mv_array = np.concatenate(mv_array)

    mv_mean = np.mean(mv_array)
    mv_std = np.std(mv_array)

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

  elif df.iloc[i,29] == 0:
    mv_mean = 0
    mv_std = 0

    mv_cursor_mean.append(mv_mean)
    mv_cursor_std.append(mv_std)

mv_mean4 = np.array(mv_cursor_mean).reshape(df.shape[0],1)
mv_std4 = np.array(mv_cursor_std).reshape(df.shape[0],1)


# Average Ionic Radius

ir_cursor_mean=[]
ir_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    ir_array = ((np.repeat(average_ionic_radius[df.iloc[i,30]],df.iloc[i,31]), np.repeat(average_ionic_radius[df.iloc[i,32]],df.iloc[i,33])))
    ir_array = np.concatenate(ir_array)

    ir_mean = np.mean(ir_array)
    ir_std = np.std(ir_array)

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

  elif df.iloc[i,29] == 0:
    ir_mean = 0
    ir_std = 0

    ir_cursor_mean.append(ir_mean)
    ir_cursor_std.append(ir_std)

ir_mean4 = np.array(ir_cursor_mean).reshape(df.shape[0],1)
ir_std4 = np.array(ir_cursor_std).reshape(df.shape[0],1)


# Polarizability

pz_cursor_mean=[]
pz_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    pz_array = ((np.repeat(polarizability[df.iloc[i,30]],df.iloc[i,31]), np.repeat(polarizability[df.iloc[i,32]],df.iloc[i,33])))
    pz_array = np.concatenate(pz_array)

    pz_mean = np.mean(pz_array)
    pz_std = np.std(pz_array)

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

  elif df.iloc[i,29] == 0:
    pz_mean = 0
    pz_std = 0

    pz_cursor_mean.append(pz_mean)
    pz_cursor_std.append(pz_std)

pz_mean4 = np.array(pz_cursor_mean).reshape(df.shape[0],1)
pz_std4 = np.array(pz_cursor_std).reshape(df.shape[0],1)


# Specific Heat

sh_cursor_mean=[]
sh_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    sh_array = ((np.repeat(specific_heat[df.iloc[i,30]],df.iloc[i,31]), np.repeat(specific_heat[df.iloc[i,32]],df.iloc[i,33])))
    sh_array = np.concatenate(sh_array)

    sh_mean = np.mean(sh_array)
    sh_std = np.std(sh_array)

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

  elif df.iloc[i,29] == 0:
    sh_mean = 0
    sh_std = 0

    sh_cursor_mean.append(sh_mean)
    sh_cursor_std.append(sh_std)

sh_mean4 = np.array(sh_cursor_mean).reshape(df.shape[0],1)
sh_std4 = np.array(sh_cursor_std).reshape(df.shape[0],1)


# Thermal Conductivity

tc_cursor_mean=[]
tc_cursor_std=[]

for i in range (0, df.shape[0]):
  if df.iloc[i,29] == 2:
    tc_array = ((np.repeat(thermal_conductivity[df.iloc[i,30]],df.iloc[i,31]), np.repeat(thermal_conductivity[df.iloc[i,32]],df.iloc[i,33])))
    tc_array = np.concatenate(tc_array)

    tc_mean = np.mean(tc_array)
    tc_std = np.std(tc_array)

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

  elif df.iloc[i,29] == 0:
    tc_mean = 0
    tc_std = 0

    tc_cursor_mean.append(tc_mean)
    tc_cursor_std.append(tc_std)

tc_mean4 = np.array(tc_cursor_mean).reshape(df.shape[0],1)
tc_std4 = np.array(tc_cursor_std).reshape(df.shape[0],1)

tc_mean4.shape

"""Concatenate all features vector components"""

z_mean = np.concatenate((z_mean1,z_mean2,z_mean3,z_mean4), -1)
gn_mean = np.concatenate((gn_mean1,gn_mean2,gn_mean3,gn_mean4), -1)
rn_mean = np.concatenate((rn_mean1,rn_mean2,rn_mean3,rn_mean4), -1)
vl_mean = np.concatenate((vl_mean1,vl_mean2,vl_mean3,vl_mean4), -1)
bk_mean = np.concatenate((bk_mean1,bk_mean2,bk_mean3,bk_mean4), -1)
x_mean = np.concatenate((x_mean1,x_mean2,x_mean3,x_mean4), -1)
cr_mean = np.concatenate((cr_mean1,cr_mean2,cr_mean3,cr_mean4), -1)
ie_mean = np.concatenate((ie_mean1,ie_mean2,ie_mean3,ie_mean4), -1)
ea_mean = np.concatenate((ea_mean1,ea_mean2,ea_mean3,ea_mean4), -1)
mv_mean = np.concatenate((mv_mean1,mv_mean2,mv_mean3,mv_mean4), -1)
ir_mean = np.concatenate((ir_mean1,ir_mean2,ir_mean3,ir_mean4), -1)
pz_mean = np.concatenate((pz_mean1,pz_mean2,pz_mean3,pz_mean4), -1)
sh_mean = np.concatenate((sh_mean1,sh_mean2,sh_mean3,sh_mean4), -1)

feat_mean = np.concatenate((z_mean,gn_mean,rn_mean,vl_mean,bk_mean,x_mean,cr_mean,ie_mean,ea_mean,mv_mean,
                            ir_mean,pz_mean,sh_mean), -1)


z_std = np.concatenate((z_std1,z_std2,z_std3,z_std4), -1)
gn_std = np.concatenate((gn_std1,gn_std2,gn_std3,gn_std4), -1)
rn_std = np.concatenate((rn_std1,rn_std2,rn_std3,rn_std4), -1)
vl_std = np.concatenate((vl_std1,vl_std2,vl_std3,vl_std4), -1)
bk_std = np.concatenate((bk_std1,bk_std2,bk_std3,bk_std4), -1)
x_std = np.concatenate((x_std1,x_std2,x_std3,x_std4), -1)
cr_std = np.concatenate((cr_std1,cr_std2,cr_std3,cr_std4), -1)
ie_std = np.concatenate((ie_std1,ie_std2,ie_std3,ie_std4), -1)
ea_std = np.concatenate((ea_std1,ea_std2,ea_std3,ea_std4), -1)
mv_std = np.concatenate((mv_std1,mv_std2,mv_std3,mv_std4), -1)
ir_std = np.concatenate((ir_std1,ir_std2,ir_std3,ir_std4), -1)
pz_std = np.concatenate((pz_std1,pz_std2,pz_std3,pz_std4), -1)
sh_std = np.concatenate((sh_std1,sh_std2,sh_std3,sh_std4), -1)

feat_std = np.concatenate((z_std,gn_std,rn_std,vl_std,bk_std,x_std,cr_std,ie_std,ea_std,mv_std,
                            ir_std,pz_std,sh_std), -1)

print(feat_mean.shape, feat_std.shape)


mill_type = np.array(df.iloc[:,35]).reshape(df.shape[0],1)
for i in range (0, df.shape[0]):
  if mill_type[i] == 'Dry':
    mill_type[i] = 1
  elif mill_type[i] == 'Wet':
    mill_type[i] = 2

feat_mean = np.concatenate((feat_mean,mill_type), -1).astype('float32')
feat_std = np.concatenate((feat_std,mill_type), -1).astype('float32')

print(feat_mean.shape, feat_std.shape)

"""Use KMeans clustering to complete NaN missing data for feature set"""

from sklearn.cluster import KMeans

wcss = []
for i in range(1, 40):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=500, n_init=10, random_state=0)
    kmeans.fit(feat_mean)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 40), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# --- High-dimensional clustering visualization ---
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
import numpy as np

# 假设 feat_mean 已经存在，并且是 numpy 数组（形状大约为 (312, 52)）
print("Feature matrix shape:", feat_mean.shape)

# Step 1: 选择最佳聚类数 (k)，这里假设你已用 Elbow 确定为 k=5
k = 5

# Step 2: 拟合 K-means
kmeans = KMeans(n_clusters=k, init='k-means++', max_iter=500, n_init=10, random_state=0)
clusters = kmeans.fit_predict(feat_mean)

# Step 3: 使用 PCA 将高维特征降到二维（用于可视化）
pca = PCA(n_components=2)
feat_pca = pca.fit_transform(feat_mean)

# 可选：如需更清晰的分离，可以使用 t-SNE（但运行稍慢）
# feat_pca = TSNE(n_components=2, perplexity=30, learning_rate=200, random_state=0).fit_transform(feat_mean)

# Step 4: 绘制聚类分布图
plt.figure(figsize=(7,6))
plt.scatter(feat_pca[:,0], feat_pca[:,1], c=clusters, cmap='tab10', s=40, alpha=0.8, edgecolor='k')
plt.title('Visualization of the High-Dimensional Process Space (K-means Clusters)', fontsize=12)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.colorbar(label='Cluster ID')
plt.tight_layout()
plt.show()

df = pd.read_excel('synthesis_sheet_V2.xlsx')
df["original_index"] = df.index
df = df[(df['Crystallitesize(nm)'] <= 75) | (df['Crystallitesize(nm)'].isna())].reset_index(drop=True)


df_feat_mean = pd.DataFrame(feat_mean)
df_feat_std = pd.DataFrame(feat_std)

df_mean = pd.concat([df_feat_mean, df.iloc[:,34], df.iloc[:,36:42]], axis=1)
df_std = pd.concat([df_feat_std, df.iloc[:,34], df.iloc[:,36:42]], axis=1)

df_mean = pd.DataFrame(np.array(df_mean).astype('float32'))
df_std = pd.DataFrame(np.array(df_std).astype('float32'))

df_mean.shape

from sklearn.cluster import KMeans

for i in [54,55,56,57,58,59,60]:
  temp_df = df_mean.iloc[:,:i].dropna()
  kmeans = KMeans(n_clusters=20).fit(temp_df)

  #all_data = df_mean.fillna(np.mean(temp_df[i-1].values))
  #all_data = df_mean.fillna(df_mean.median())
  all_data = df_mean.fillna(0)

  cluster_pred = kmeans.predict(all_data.iloc[:, :i])

  centroids = kmeans.cluster_centers_

  nan_idx = df_mean.iloc[:,i-1].isna().values
  nan_idx = np.where(nan_idx)[0]

  for idx in nan_idx:
    df_mean.iloc[idx,i-1] = centroids[(cluster_pred[idx]),i-1]

df_mean[53] = np.round(np.array(df_mean[53]), 0)
df_mean.iloc[:10,:]

from sklearn.utils import shuffle

cryst_idx = np.delete(np.arange(df.shape[0]), np.where(df["Crystallitesize(nm)"].isna().values)[0])

y = np.array(df_mean.iloc[cryst_idx, -1])
X = np.array(df_mean.iloc[cryst_idx, :-1])

X, y = shuffle(X, y, random_state=0)

X.shape, y.shape

"""Prepare 10-fold cross-validation training and testing sets."""

X1, y1 = X[:int(X.shape[0]/10)*1, :], y[:int(X.shape[0]/10)*1]
X2, y2 = X[int(X.shape[0]/10)*1:int(X.shape[0]/10)*2, :], y[int(X.shape[0]/10)*1:int(X.shape[0]/10)*2]
X3, y3 = X[int(X.shape[0]/10)*2:int(X.shape[0]/10)*3, :], y[int(X.shape[0]/10)*2:int(X.shape[0]/10)*3]
X4, y4 = X[int(X.shape[0]/10)*3:int(X.shape[0]/10)*4, :], y[int(X.shape[0]/10)*3:int(X.shape[0]/10)*4]
X5, y5 = X[int(X.shape[0]/10)*4:int(X.shape[0]/10)*5, :], y[int(X.shape[0]/10)*4:int(X.shape[0]/10)*5]
X6, y6 = X[int(X.shape[0]/10)*5:int(X.shape[0]/10)*6, :], y[int(X.shape[0]/10)*5:int(X.shape[0]/10)*6]
X7, y7 = X[int(X.shape[0]/10)*6:int(X.shape[0]/10)*7, :], y[int(X.shape[0]/10)*6:int(X.shape[0]/10)*7]
X8, y8 = X[int(X.shape[0]/10)*7:int(X.shape[0]/10)*8, :], y[int(X.shape[0]/10)*7:int(X.shape[0]/10)*8]
X9, y9 = X[int(X.shape[0]/10)*8:int(X.shape[0]/10)*9, :], y[int(X.shape[0]/10)*8:int(X.shape[0]/10)*9]
X10, y10 = X[int(X.shape[0]/10)*9:, :], y[int(X.shape[0]/10)*9:]

X_train1, y_train1, X_test1, y_test1 = list(np.concatenate((X1,X2,X3,X4,X5,X6,X7,X8,X9), 0)), list(np.concatenate((y1,y2,y3,y4,y5,y6,y7,y8,y9), 0)), list(X10), list(y10)
X_train2, y_train2, X_test2, y_test2 = list(np.concatenate((X1,X2,X3,X4,X5,X6,X7,X8,X10), 0)), list(np.concatenate((y1,y2,y3,y4,y5,y6,y7,y8,y10), 0)), list(X9), list(y9)
X_train3, y_train3, X_test3, y_test3 = list(np.concatenate((X1,X2,X3,X4,X5,X6,X7,X9,X10), 0)), list(np.concatenate((y1,y2,y3,y4,y5,y6,y7,y9,y10), 0)), list(X8), list(y8)
X_train4, y_train4, X_test4, y_test4 = list(np.concatenate((X1,X2,X3,X4,X5,X6,X8,X9,X10), 0)), list(np.concatenate((y1,y2,y3,y4,y5,y6,y8,y9,y10), 0)), list(X7), list(y7)
X_train5, y_train5, X_test5, y_test5 = list(np.concatenate((X1,X2,X3,X4,X5,X7,X8,X9,X10), 0)), list(np.concatenate((y1,y2,y3,y4,y5,y7,y8,y9,y10), 0)), list(X6), list(y6)
X_train6, y_train6, X_test6, y_test6 = list(np.concatenate((X1,X2,X3,X4,X6,X7,X8,X9,X10), 0)), list(np.concatenate((y1,y2,y3,y4,y6,y7,y8,y9,y10), 0)), list(X5), list(y5)
X_train7, y_train7, X_test7, y_test7 = list(np.concatenate((X1,X2,X3,X5,X6,X7,X8,X9,X10), 0)), list(np.concatenate((y1,y2,y3,y5,y6,y7,y8,y9,y10), 0)), list(X4), list(y4)
X_train8, y_train8, X_test8, y_test8 = list(np.concatenate((X1,X2,X4,X5,X6,X7,X8,X9,X10), 0)), list(np.concatenate((y1,y2,y4,y5,y6,y7,y8,y9,y10), 0)), list(X3), list(y3)
X_train9, y_train9, X_test9, y_test9 = list(np.concatenate((X1,X3,X4,X5,X6,X7,X8,X9,X10), 0)), list(np.concatenate((y1,y3,y4,y5,y6,y7,y8,y9,y10), 0)), list(X2), list(y2)
X_train10, y_train10, X_test10, y_test10 = list(np.concatenate((X2,X3,X4,X5,X6,X7,X8,X9,X10), 0)), list(np.concatenate((y2,y3,y4,y5,y6,y7,y8,y9,y10), 0)), list(X1), list(y1)

X_train = [X_train1, X_train2, X_train3, X_train4, X_train5, X_train6, X_train7, X_train8, X_train9, X_train10]
y_train = [y_train1, y_train2, y_train3, y_train4, y_train5, y_train6, y_train7, y_train8, y_train9, y_train10]
X_test = [X_test1, X_test2, X_test3, X_test4, X_test5, X_test6, X_test7, X_test8, X_test9, X_test10]
y_test = [y_test1, y_test2, y_test3, y_test4, y_test5, y_test6, y_test7, y_test8, y_test9, y_test10]

"""Combine bootsraps algorithm and cross-validation for finding best predictive model"""

from sklearn.utils import resample
from sklearn.ensemble import RandomForestRegressor

n_bootstrap = 100

import xgboost as xgb
xgb_model = xgb.XGBRegressor(n_estimators=1000)
xgb_y_pred = []
for i in range(len(X_train)):
  predictions = np.zeros((n_bootstrap, len(X_test[i])))
  for j in range(n_bootstrap):
    X_resampled, y_resampled = resample(np.array(X_train[i]), np.array(y_train[i]))
    xgb_model.fit(X_resampled, y_resampled)
    predictions[j, :] = xgb_model.predict(np.array(X_test[i]))
  xgb_y_pred.append([list(predictions.mean(axis=0)), list(predictions.std(axis=0))])


from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
svr_model = make_pipeline(StandardScaler(), SVR(kernel='rbf'))
svr_y_pred = []
for i in range(len(X_train)):
  predictions = np.zeros((n_bootstrap, len(X_test[i])))
  for j in range(n_bootstrap):
    X_resampled, y_resampled = resample(np.array(X_train[i]), np.array(y_train[i]))
    svr_model.fit(X_resampled, y_resampled)
    predictions[j, :] = svr_model.predict(np.array(X_test[i]))
  svr_y_pred.append([list(predictions.mean(axis=0)), list(predictions.std(axis=0))])


from sklearn.ensemble import GradientBoostingRegressor
gbr_model = GradientBoostingRegressor(n_estimators=1000)
gbr_y_pred = []
for i in range(len(X_train)):
  predictions = np.zeros((n_bootstrap, len(X_test[i])))
  for j in range(n_bootstrap):
    X_resampled, y_resampled = resample(np.array(X_train[i]), np.array(y_train[i]))
    gbr_model.fit(X_resampled, y_resampled)
    predictions[j, :] = gbr_model.predict(np.array(X_test[i]))
  gbr_y_pred.append([list(predictions.mean(axis=0)), list(predictions.std(axis=0))])


from sklearn.tree import DecisionTreeRegressor
dtr_model = DecisionTreeRegressor()
dtr_y_pred = []
for i in range(len(X_train)):
  predictions = np.zeros((n_bootstrap, len(X_test[i])))
  for j in range(n_bootstrap):
    X_resampled, y_resampled = resample(np.array(X_train[i]), np.array(y_train[i]))
    dtr_model.fit(X_resampled, y_resampled)
    predictions[j, :] = dtr_model.predict(np.array(X_test[i]))
  dtr_y_pred.append([list(predictions.mean(axis=0)), list(predictions.std(axis=0))])


from sklearn.ensemble import AdaBoostRegressor
abr_model = AdaBoostRegressor()
abr_y_pred = []
for i in range(len(X_train)):
  predictions = np.zeros((n_bootstrap, len(X_test[i])))
  for j in range(n_bootstrap):
    X_resampled, y_resampled = resample(np.array(X_train[i]), np.array(y_train[i]))
    abr_model.fit(X_resampled, y_resampled)
    predictions[j, :] = abr_model.predict(np.array(X_test[i]))
  abr_y_pred.append([list(predictions.mean(axis=0)), list(predictions.std(axis=0))])


from sklearn.ensemble import RandomForestRegressor
rfr_model = RandomForestRegressor(n_estimators=1000)
rfr_y_pred = []
for i in range(len(X_train)):
  predictions = np.zeros((n_bootstrap, len(X_test[i])))
  for j in range(n_bootstrap):
    X_resampled, y_resampled = resample(np.array(X_train[i]), np.array(y_train[i]))
    rfr_model.fit(X_resampled, y_resampled)
    predictions[j, :] = rfr_model.predict(np.array(X_test[i]))
  rfr_y_pred.append([list(predictions.mean(axis=0)), list(predictions.std(axis=0))])


from sklearn.neighbors import KNeighborsRegressor
knr_model = KNeighborsRegressor()
knr_y_pred = []
for i in range(len(X_train)):
  predictions = np.zeros((n_bootstrap, len(X_test[i])))
  for j in range(n_bootstrap):
    X_resampled, y_resampled = resample(np.array(X_train[i]), np.array(y_train[i]))
    knr_model.fit(X_resampled, y_resampled)
    predictions[j, :] = knr_model.predict(np.array(X_test[i]))
  knr_y_pred.append([list(predictions.mean(axis=0)), list(predictions.std(axis=0))])


from sklearn.linear_model import PassiveAggressiveRegressor
par_model = PassiveAggressiveRegressor()
par_y_pred = []
for i in range(len(X_train)):
  predictions = np.zeros((n_bootstrap, len(X_test[i])))
  for j in range(n_bootstrap):
    X_resampled, y_resampled = resample(np.array(X_train[i]), np.array(y_train[i]))
    par_model.fit(X_resampled, y_resampled)
    predictions[j, :] = par_model.predict(np.array(X_test[i]))
  par_y_pred.append([list(predictions.mean(axis=0)), list(predictions.std(axis=0))])


from sklearn.gaussian_process import GaussianProcessRegressor
gpr_model = GaussianProcessRegressor()
gpr_y_pred = []
for i in range(len(X_train)):
  predictions = np.zeros((n_bootstrap, len(X_test[i])))
  for j in range(n_bootstrap):
    X_resampled, y_resampled = resample(np.array(X_train[i]), np.array(y_train[i]))
    gpr_model.fit(X_resampled, y_resampled)
    predictions[j, :] = gpr_model.predict(np.array(X_test[i]))
  gpr_y_pred.append([list(predictions.mean(axis=0)), list(predictions.std(axis=0))])

cv_mae_xgb = []
for i in range(len(y_test)):
  mae_xgb = (mean_absolute_error(np.array(xgb_y_pred[i][0]), y_test[i]))
  cv_mae_xgb.append(mae_xgb)

cv_mae_svr = []
for i in range(len(y_test)):
  mae_svr = (mean_absolute_error(np.array(svr_y_pred[i][0]), y_test[i]))
  cv_mae_svr.append(mae_svr)

cv_mae_gbr = []
for i in range(len(y_test)):
  mae_gbr = (mean_absolute_error(np.array(gbr_y_pred[i][0]), y_test[i]))
  cv_mae_gbr.append(mae_gbr)

cv_mae_dtr = []
for i in range(len(y_test)):
  mae_dtr = (mean_absolute_error(np.array(dtr_y_pred[i][0]), y_test[i]))
  cv_mae_dtr.append(mae_dtr)

cv_mae_abr = []
for i in range(len(y_test)):
  mae_abr = (mean_absolute_error(np.array(abr_y_pred[i][0]), y_test[i]))
  cv_mae_abr.append(mae_abr)

cv_mae_rfr = []
for i in range(len(y_test)):
  mae_rfr = (mean_absolute_error(np.array(rfr_y_pred[i][0]), y_test[i]))
  cv_mae_rfr.append(mae_rfr)

cv_mae_knr = []
for i in range(len(y_test)):
  mae_knr = (mean_absolute_error(np.array(knr_y_pred[i][0]), y_test[i]))
  cv_mae_knr.append(mae_knr)

cv_mae_par = []
for i in range(len(y_test)):
  mae_par = (mean_absolute_error(np.array(par_y_pred[i][0]), y_test[i]))
  cv_mae_par.append(mae_par)

cv_mae_gpr = []
for i in range(len(y_test)):
  mae_gpr = (mean_absolute_error(np.array(gpr_y_pred[i][0]), y_test[i]))
  cv_mae_gpr.append(mae_gpr)

#-------------------------------------------------------------#
print('XGB Model| MAE on test set: %.4f'% np.mean(cv_mae_xgb))
print('SVR Model| MAE on test set: %.4f'% np.mean(cv_mae_svr))
print('GBR Model| MAE on test set: %.4f'% np.mean(cv_mae_gbr))
print('DTR Model| MAE on test set: %.4f'% np.mean(cv_mae_dtr))
print('ABR Model| MAE on test set: %.4f'% np.mean(cv_mae_abr))
print('RFR Model| MAE on test set: %.4f'% np.mean(cv_mae_rfr))
print('KNR Model| MAE on test set: %.4f'% np.mean(cv_mae_knr))
print('PAR Model| MAE on test set: %.4f'% np.mean(cv_mae_par))
print('GPR Model| MAE on test set: %.4f'% np.mean(cv_mae_gpr))

import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import r2_score

# 模型与预测结果
model_names = ['XGB', 'SVR', 'GBR', 'DTR', 'ABR', 'RFR', 'KNR', 'PAR', 'GPR']
model_preds = [xgb_y_pred, svr_y_pred, gbr_y_pred, dtr_y_pred, abr_y_pred,
               rfr_y_pred, knr_y_pred, par_y_pred, gpr_y_pred]

fig, axes = plt.subplots(3, 3, figsize=(15, 12))
axes = axes.flatten()

for i, (name, preds) in enumerate(zip(model_names, model_preds)):
    ax = axes[i]

    # 测试集预测均值和真实值
    y_test_all = np.concatenate([np.array(y_test[k]) for k in range(10)])
    y_test_pred = np.concatenate([np.array(preds[k][0]) for k in range(10)])

    # 训练集预测均值和真实值（我们用训练集残差比较）
    y_train_all = np.concatenate([np.array(y_train[k]) for k in range(10)])
    y_train_pred = []
    for k in range(10):
        # 用这一折的模型对 train 集预测（注意：你没有保留训练预测，所以我们暂时近似用测试模型重新预测）
        y_train_pred.extend([np.mean([model_preds[i][j][0][m] for j in range(10) if m < len(y_test[j])])
                             for m in range(len(y_train[k]))])
    y_train_pred = np.array(y_train_pred)

    # 实际绘图
    ax.scatter(y_train_all, y_train_pred, c='blue', label='Train', alpha=0.6, s=25)
    ax.scatter(y_test_all, y_test_pred, c='green', label='Test', alpha=0.6, s=25)
    ax.plot([y_test_all.min(), y_test_all.max()], [y_test_all.min(), y_test_all.max()], 'k--', lw=1)

    # 计算 R² 只对测试集
    r2 = r2_score(y_test_all, y_test_pred)
    ax.set_title(f"({chr(97+i)}) {name} Model\n$R^2$ = {r2:.3f}")
    ax.set_xlabel("Actual Values")
    ax.set_ylabel("Predicted Values")
    ax.legend()

plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.rcParams.update({
    "figure.dpi": 180, "savefig.dpi": 300,
    "font.size": 12, "axes.labelsize": 12, "axes.titlesize": 13,
    "legend.fontsize": 10
})

# ===== 1) 按你现有变量名收集数据（缺哪个就自动跳过） =====
model_specs = [
    ("XGB", "xgb_y_pred", "cv_mae_xgb"),
    ("SVR", "svr_y_pred", "cv_mae_svr"),
    ("GBR", "gbr_y_pred", "cv_mae_gbr"),
    ("DTR", "dtr_y_pred", "cv_mae_dtr"),
    ("ABR", "abr_y_pred", "cv_mae_abr"),
    ("RFR", "rfr_y_pred", "cv_mae_rfr"),
    ("KNR", "knr_y_pred", "cv_mae_knr"),
    ("PAR", "par_y_pred", "cv_mae_par"),
    ("GPR", "gpr_y_pred", "cv_mae_gpr"),
]

model_names, mae_list, uncertainty_list = [], [], []

for name, pred_var, mae_var in model_specs:
    if pred_var in globals() and mae_var in globals():
        preds = globals()[pred_var]              # list of folds; each item: (yhat_mean, yhat_std)
        cv_mae = np.asarray(globals()[mae_var]).ravel()  # per-fold MAE
        # 收集每个模型的所有样本不确定性（把每折的 std 拼起来）
        stds_all = []
        for k in range(len(preds)):              # 用 len(preds) 防止越界
            stds_k = np.asarray(preds[k][1]).ravel()   # 只取 index=1（标准差）
            stds_all.append(stds_k)
        stds_all = np.concatenate(stds_all, axis=0) if len(stds_all) else np.array([])
        # 保存
        model_names.append(name)
        mae_list.append(cv_mae)
        uncertainty_list.append(stds_all)
    else:
        print(f"[skip] 未找到 {pred_var} 或 {mae_var}，该模型跳过。")

# 简单的健壮性检查
assert len(model_names) > 0, "没有找到任何模型的数据，请检查变量名是否一致。"

# 将模型按平均 MAE 升序排序，论文更好读
order_idx = np.argsort([np.mean(m) for m in mae_list])
model_names = [model_names[i] for i in order_idx]
mae_list    = [mae_list[i]    for i in order_idx]
# 在拼接不确定性时，加一个数值下限
uncertainty_list = []
for preds in [xgb_y_pred, svr_y_pred, gbr_y_pred, dtr_y_pred, abr_y_pred,
              rfr_y_pred, knr_y_pred, par_y_pred, gpr_y_pred]:
    stds = []
    for k in range(len(preds)):
        stds_k = np.array(preds[k][1]).ravel()
        # 设置一个下限，避免数值下溢
        stds_k = np.clip(stds_k, 1e-3, None)
        stds.append(stds_k)
    uncertainty_list.append(np.concatenate(stds))

# 重新画箱线图
plt.figure(figsize=(10,5))
sns.boxplot(data=uncertainty_list, whis=[5,95], showfliers=True)
plt.yscale('log')
plt.xticks(range(len(model_names)), model_names)
plt.ylabel("Predictive std (uncertainty, nm)")
plt.title("Uncertainty distribution across models (clipped at 1e-3)")
plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()


# ===== 2) 图A：per-fold MAE 箱线图（比叠加直方图更清晰） =====
plt.figure(figsize=(10,5))
sns.boxplot(data=mae_list, whis=[5,95], showfliers=False)
meds = [np.median(x) for x in mae_list]
plt.scatter(range(len(meds)), meds, zorder=3)  # 中位数点
plt.xticks(range(len(model_names)), model_names)
plt.ylabel("MAE per fold (nm)")
plt.title("Per-fold MAE distribution across models")
plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()

# =========================
# SHAP with fully human-readable feature names (59 features)
# =========================
import os
import numpy as np
import pandas as pd
import shap, matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# ---------- 1) 构造 60 列(前59为特征、最后1列为y)的人类可读列名 ----------
# 0..51: 13类 * 4个前驱体 的“mean”描述符（与你的 feat_mean 顺序完全一致）
_prop_labels = [
    "AtomicNumber", "GroupNumber", "RowNumber", "Valence", "Block",
    "Electronegativity", "CovalentRadius", "IonizationEnergy",
    "ElectronAffinity", "MolarVolume", "IonicRadius",
    "Polarizability", "SpecificHeat"
]
_prec_labels = ["P1","P2","P3","P4"]

feat_names = [f"{p}_mean_{q}" for p in _prop_labels for q in _prec_labels]  # 13*4=52

# 52: 湿/干磨（你前面把 'Dry'->1, 'Wet'->2 拼到了 feat_mean 末尾）
feat_names.append("Wet_or_Dry")  # index 52

# 53..59: 原始 df 中的工艺参数列名：34, 36..41（共7列）
process_src_idx = [34] + list(range(36, 42))  # 34,36,37,38,39,40,41
process_names = [str(df.columns[i]) for i in process_src_idx]
feat_names.extend(process_names)  # -> 累计 60 列名

assert len(feat_names) == df_mean.shape[1], \
    f"列名数量({len(feat_names)})与df_mean列数({df_mean.shape[1]})不一致，请检查拼接顺序。"

# 给 df_mean 赋上可读列名（不改动原 df_mean）
df_mean_named = df_mean.copy()
df_mean_named.columns = feat_names

# ---------- 2) 取特征与标签 ----------
# 你的模型是用 59 个特征训练的，我们安全地从原始 df 取 y，避免泄露
assert 'Crystallitesize(nm)' in df.columns, "原始 df 中未找到目标列 'Crystallitesize(nm)'."
X_all = df_mean_named.iloc[cryst_idx, :-1].reset_index(drop=True)   # 59 features
y_all = df.loc[cryst_idx, 'Crystallitesize(nm)'].astype(float).reset_index(drop=True)

# ---------- 3) 训练 & 简评 ----------
X_train, X_test, y_train, y_test = train_test_split(X_all, y_all, test_size=0.1, random_state=42)
rfr = RandomForestRegressor(n_estimators=1000, max_features='sqrt', random_state=42, n_jobs=-1)
rfr.fit(X_train, y_train)
y_pred = rfr.predict(X_test)
print(f"[RFR] Test MAE = {mean_absolute_error(y_test, y_pred):.3f}, R2 = {r2_score(y_test, y_pred):.3f}")

# ---------- 4) SHAP ----------
explainer = shap.TreeExplainer(rfr)
try:
    shap_values = explainer.shap_values(X_test)        # 老版本shap
    shap_arr = shap_values
except Exception:
    shap_values = explainer(X_test)                    # 新API
    shap_arr = shap_values.values

os.makedirs("shap_outputs", exist_ok=True)

# Beeswarm / dot
plt.figure(figsize=(11, 6), dpi=150)
shap.summary_plot(shap_arr, X_test, plot_type='dot', show=False)  # 列名直接来自 X_test.columns
plt.tight_layout(); plt.savefig("shap_outputs/shap_beeswarm.png", bbox_inches="tight"); plt.show()

# Bar 排名
plt.figure(figsize=(9, 6), dpi=150)
shap.summary_plot(shap_arr, X_test, plot_type='bar', show=False)
plt.tight_layout(); plt.savefig("shap_outputs/shap_bar.png", bbox_inches="tight"); plt.show()

# 导出重要性表（便于论文附录）
mean_abs_shap = np.abs(shap_arr).mean(axis=0)
imp_df = pd.DataFrame({"feature": X_test.columns, "mean_abs_shap": mean_abs_shap}) \
           .sort_values("mean_abs_shap", ascending=False)
imp_df.to_csv("shap_feature_importance.csv", index=False)

# 打印Top10（检查名称是否全为文字）
topN = 10
print("\nTop 10 features by mean(|SHAP|):")
for i, (f, v) in enumerate(zip(imp_df["feature"].head(topN), imp_df["mean_abs_shap"].head(topN)), 1):
    print(f"{i:2d}. {f}  |  {v:.6f}")

print("Saved: shap_outputs/shap_beeswarm.png, shap_outputs/shap_bar.png, shap_feature_importance.csv")











"""predict missing NaN crystallite values"""



non_cryst = np.take(np.arange(df.shape[0]), np.where(df["Crystallitesize(nm)"].isna().values)[0])
X_non_cryst = np.array(df_mean.iloc[non_cryst, :-1])
preds = gbr_model.predict(X_non_cryst)

df_mean.iloc[non_cryst, -1] = preds
df_mean.head()

"""Retrain model with complete dataset"""

X_train, X_test, y_train, y_test = train_test_split(df_mean.iloc[:,:-1], df_mean.iloc[:,-1], test_size=0.1, random_state=42)
print (X_train.shape,  X_test.shape, y_train.shape, y_test.shape)

from sklearn.ensemble import RandomForestRegressor
gbr_model = RandomForestRegressor(n_estimators=1000).fit(X_train, y_train)
preds = gbr_model.predict(X_test)
train_preds = gbr_model.predict(X_train)
print('R-square: %.4f' % (r2_score(y_test, preds)*100))
print("Mean squared error: %.4f"% mean_squared_error(y_test, preds))
print("RMSE test: %.4f" % np.sqrt(mean_squared_error(y_test, preds)))
print("Mean absolute error: %.4f"% mean_absolute_error(y_test, preds))
print("Mean absolute error (Train): %.4f" % mean_absolute_error(y_train, train_preds))

plt.scatter(y_test, preds)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=1)
plt.xlabel('Measured')
plt.ylabel('Predicted')
plt.show()

from sklearn.metrics import r2_score, mean_absolute_error
import matplotlib.pyplot as plt
import numpy as np

# ✅ 模型性能评估
train_preds = gbr_model.predict(X_train)
test_preds = gbr_model.predict(X_test)

r2_test = r2_score(y_test, test_preds)
r2_train = r2_score(y_train, train_preds)

mae_test = mean_absolute_error(y_test, test_preds)
mae_train = mean_absolute_error(y_train, train_preds)

print("After Filling Missing Values and Retraining:")
print(f"Train R²: {r2_train:.3f}, MAE: {mae_train:.3f}")
print(f"Test  R²: {r2_test:.3f}, MAE: {mae_test:.3f}")

# ✅ 可视化：预测 vs 实际值（包含训练 + 测试）
plt.figure(figsize=(6,6))
plt.scatter(y_train, train_preds, color='blue', label='Train', alpha=0.6, s=25)
plt.scatter(y_test, test_preds, color='green', label='Test', alpha=0.6, s=25)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=1)
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title(f'RFR Prediction after Imputation\nTest R² = {r2_test:.3f}')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""Straightforward predictor modell with 90/10 train-test split

Straightforward predictor model with 10-fold cross-validation
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# ! pip install scikit-optimize

print("Total rows in df_mean:", df_mean.shape[0])

# 查看第306行的最后5列
df_mean.iloc[305, -5:]

""" ## (1) BO algorithm with varying mill-type and ball-type"""

# Import Bayesian Optimization Library
from skopt.space import Real, Integer
from skopt.utils import use_named_args
from skopt import gp_minimize
from skopt.space import Categorical

perov = 305 # Perovskite in dataset we wish to find the optimized lattice parameters (zero means 1st perov in dataset)
ideal_cs = 50

#x0 = Integer(name='x0_', low=df_mean[52].min(), high=df_mean[52].max()) # Wet or dry
x0 = Categorical(name='x0_', categories=[1])
x1 = Categorical(name='x1_', categories=[3])  # Use the Categorical type, allowing only 2, 3 or 4
#x1 = Integer(name='x1_', low=df_mean[53].min(), high=df_mean[53].max()) # Milling ball material
x2 = Real(name='x2_', low=df_mean[54].min(), high=df_mean[54].max()) # B-P-R
x3 = Real(name='x3_', low=300, high=700) # Frequency
x4 = Real(name='x4_', low=df_mean[56].min(), high=df_mean[56].max()) # Milling Time
x5 = Real(name='x5_', low=df_mean[57].min(), high=1200) # Calcination Temp
x6 = Real(name='x6_', low=df_mean[58].min(), high=df_mean[58].max()) # Calcination Time

dimensions = [x0,x1,x2,x3,x4,x5,x6]

#Constraint checking function
def check_constraints(params):
    x2_, x4_, x6_, x5_, x1_ = params[2], params[4], params[6], params[5], params[1]
    return (x2_ < 50) and (x4_ + x6_ < 5) and (x5_ < 1200) and (x1_ in [3])

# objective function
@use_named_args(dimensions=dimensions)
def my_objective_function(x0_, x1_, x2_, x3_, x4_, x5_, x6_):
    if not check_constraints([x0_, x1_, x2_, x3_, x4_, x5_, x6_]):
        return 1e6  # Punish unworkable solutions

    process_params = np.array((x0_, x1_, x2_, x3_, x4_, x5_, x6_)).reshape(1,7)
    X = np.concatenate((np.array(df_mean.iloc[perov,:52]).reshape(1,52), process_params), 1)

    pred = gbr_model.predict(X.reshape(1,59))
    pred = float(pred)

    obj1 = np.abs(pred-ideal_cs)
    #obj2 = -1*(obj1**-1)

    # --- Soft penalties ---
    penalty = 0

    # Penalty for BPR too low (< 10)
    if x2_ < 5:
        penalty += (10 - x2_)**2  # Quadratic penalty

    # Penalty for calcination temperature too low (< 700°C)
    if x5_ < 700:
        penalty += (700 - x5_) * 2  # Linear penalty

    # Penalty for ball milling time too short (< 1h)
    if x4_ < 1.0:
        penalty += (1.0 - x4_)**2 * 5  # Stronger quadratic penalty

    # Total objective = distance to target + penalty
    return float(np.abs(pred - ideal_cs)) + penalty



# Commented out IPython magic to ensure Python compatibility.
# # Execute Gaussian Process (GP) Minimization
# %%capture
# n_calls = 100
# n_initial_points = 20
# result = gp_minimize(my_objective_function, dimensions, n_calls=n_calls, n_initial_points=n_initial_points,
#                      acq_func='EI', random_state=42, n_jobs=-1,)
#

""" ## (2) BO algorithm with fixed mill-type (dry) and ball-type (steel)"""

# Import Bayesian Optimization Library
from skopt.space import Real, Integer
from skopt.utils import use_named_args
from skopt import gp_minimize

perov = 174 # LaFeO3 are 173 and 178
ideal_cs = 31

#x0 = Integer(name='x0_', low=df_mean[52].min(), high=df_mean[52].max()) # Wet or dry
#x1 = Integer(name='x1_', low=df_mean[53].min(), high=df_mean[53].max()) # Milling ball material
x2 = Real(name='x2_', low=df_mean[54].min(), high=30.0) # B-P-R
x3 = Real(name='x3_', low=df_mean[55].min(), high=1000) # Frequency
x4 = Real(name='x4_', low=df_mean[56].min(), high=df_mean[56].max()) # Milling Time
x5 = Real(name='x5_', low=df_mean[57].min(), high=1000.0) # Calcination Temp
x6 = Real(name='x6_', low=df_mean[58].min(), high=df_mean[58].max()) # Calcination Time

dimensions = [x2,x3,x4,x5,x6]

@use_named_args(dimensions=dimensions)
def my_objective_function(x2_,x3_,x4_,x5_,x6_):

  process_params = np.array((x2_,x3_,x4_,x5_,x6_)).reshape(1,5)
  X = np.concatenate((np.array(df_mean.iloc[perov,:52]).reshape(1,52), np.array([1]).reshape(1,1),
                      np.array([2]).reshape(1,1), process_params), 1)

  pred = rfr_model.predict(X.reshape(1,59))

  if x4_+x6_<80:
    obj1 = np.abs(pred-ideal_cs)
  else:
    obj1 = 1e5
  #obj2 = -1*(obj1**-1)

  return float(obj1)

# Commented out IPython magic to ensure Python compatibility.
# # Execute Gaussian Process (GP) Minimization
# %%capture
# n_calls = 100
# n_initial_points = 20
# result = gp_minimize(my_objective_function, dimensions, n_calls=n_calls, n_initial_points=n_initial_points,
#                      acq_func='EI', random_state=7, n_jobs=-1)

"""## Results with varying ball mill type and material"""

opt_input = np.concatenate((np.array(df_mean.iloc[perov,:52]).reshape(1,52), np.array(result.x).reshape(1,7)), 1)
opt_pred = gbr_model.predict(opt_input.reshape(1,59))

print('Minimized Functional Value: %.4f'% result.fun)
print('Predicted Crystallite Size: ')
print(opt_pred)
print('Optimized Process Parameters: ')
print(result.x) # Order: [Dry(1)-or-Wet(2), Mill-ball-material, BPR, Freq, Mill_Time, Calc_Temp, Calc_Time]

## Note: for Mill-ball-material, (1) is zirconia ; (2) is Chrome Steel; (3) is Tungsten Carbide; and (4) is Stainless steel; （5）is Agate;.

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

from skopt.plots import plot_convergence
plot_convergence(result)
iterations = np.asarray(np.arange(0, n_calls, 1)).reshape(n_calls,1)
plt.scatter(iterations, result.func_vals, c='red', label=r'search evaluations')
plt.ylim([0,100])
plt.legend()
plt.show()



"""## Results with fixed mill type (Dry) and material (Steel)"""

opt_input = np.concatenate((np.array(df_mean.iloc[perov,:52]).reshape(1,52), np.array([1]).reshape(1,1),
                      np.array([2]).reshape(1,1), np.array(result.x).reshape(1,5)), 1)
opt_pred = rfr_model.predict(opt_input.reshape(1,59))

print('Minimized Functional Value: %.4f'% result.fun)
print('Predicted Crystallite Size: %.4f'% opt_pred[0])
print('Optimized Process Parameters: ')
print(result.x) # Order: [BPR, Freq, Mill_Time, Calc_Temp, Calc_Time]

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

from skopt.plots import plot_convergence
plot_convergence(result)
iterations = np.asarray(np.arange(0, n_calls, 1)).reshape(n_calls,1)
plt.scatter(iterations, result.func_vals, c='red', label=r'search evaluations')
plt.ylim([0,100])
plt.legend()
plt.show()

from skopt.plots import plot_convergence
plot_convergence(result)
iterations = np.asarray(np.arange(0, 100, 1)).reshape(100,1)
plt.scatter(iterations, result.func_vals, c='red', label=r'search evaluations')

plt.legend()
plt.show()





# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

from skopt.plots import plot_gaussian_process
plot_gaussian_process(result, n_calls=n_calls-n_initial_points, show_legend=True)
plt.show()

